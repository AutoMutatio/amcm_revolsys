/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include "FileGDBAPI.h"


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>


template<class T> class OutParamValue {
  public:
    T value;
};


template<class T> class OutArrayParamValue {
  private:
    T* value;
  public:
    T get(int i) {
      return this->value[i];
    };
    void set(int i, T value) {
      this->value[i] = value;
    };
 
    T* getOutParamArrayValue() {
      return this->value;
    };
};

SWIGINTERN std::vector< std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector< std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector< std::string > *self,int i,std::vector< std::string >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< std::wstring >::const_reference std_vector_Sl_std_wstring_Sg__get(std::vector< std::wstring > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_wstring_Sg__set(std::vector< std::wstring > *self,int i,std::vector< std::wstring >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#if defined(SWIG_NOINCLUDE) || defined(SWIG_NOARRAYS)


int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input);
void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input);
jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz);


int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input);
void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input);
jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz);


int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input);
void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz);


int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input);
void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input);
jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz);


int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input);
void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input);
jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz);


int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input);
void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input);
jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz);


int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input);
void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz);


int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input);
void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input);
jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz);


int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input);
void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz);


int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input);
void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input);
jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz);


int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input);
void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input);
jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz);


int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input);
void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input);
jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz);


#else


/* bool[] support */
int SWIG_JavaArrayInBool (JNIEnv *jenv, jboolean **jarr, bool **carr, jbooleanArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetBooleanArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new bool[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = ((*jarr)[i] != 0);
  return 1;
}

void SWIG_JavaArrayArgoutBool (JNIEnv *jenv, jboolean *jarr, bool *carr, jbooleanArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jboolean)carr[i];
  jenv->ReleaseBooleanArrayElements(input, jarr, 0);
}

jbooleanArray SWIG_JavaArrayOutBool (JNIEnv *jenv, bool *result, jsize sz) {
  jboolean *arr;
  int i;
  jbooleanArray jresult = jenv->NewBooleanArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetBooleanArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jboolean)result[i];
  jenv->ReleaseBooleanArrayElements(jresult, arr, 0);
  return jresult;
}


/* signed char[] support */
int SWIG_JavaArrayInSchar (JNIEnv *jenv, jbyte **jarr, signed char **carr, jbyteArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetByteArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new signed char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (signed char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutSchar (JNIEnv *jenv, jbyte *jarr, signed char *carr, jbyteArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jbyte)carr[i];
  jenv->ReleaseByteArrayElements(input, jarr, 0);
}

jbyteArray SWIG_JavaArrayOutSchar (JNIEnv *jenv, signed char *result, jsize sz) {
  jbyte *arr;
  int i;
  jbyteArray jresult = jenv->NewByteArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetByteArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jbyte)result[i];
  jenv->ReleaseByteArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned char[] support */
int SWIG_JavaArrayInUchar (JNIEnv *jenv, jshort **jarr, unsigned char **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned char[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned char)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUchar (JNIEnv *jenv, jshort *jarr, unsigned char *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutUchar (JNIEnv *jenv, unsigned char *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* short[] support */
int SWIG_JavaArrayInShort (JNIEnv *jenv, jshort **jarr, short **carr, jshortArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetShortArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutShort (JNIEnv *jenv, jshort *jarr, short *carr, jshortArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jshort)carr[i];
  jenv->ReleaseShortArrayElements(input, jarr, 0);
}

jshortArray SWIG_JavaArrayOutShort (JNIEnv *jenv, short *result, jsize sz) {
  jshort *arr;
  int i;
  jshortArray jresult = jenv->NewShortArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetShortArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jshort)result[i];
  jenv->ReleaseShortArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned short[] support */
int SWIG_JavaArrayInUshort (JNIEnv *jenv, jint **jarr, unsigned short **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned short[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned short)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUshort (JNIEnv *jenv, jint *jarr, unsigned short *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutUshort (JNIEnv *jenv, unsigned short *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* int[] support */
int SWIG_JavaArrayInInt (JNIEnv *jenv, jint **jarr, int **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutInt (JNIEnv *jenv, jint *jarr, int *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutInt (JNIEnv *jenv, int *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned int[] support */
int SWIG_JavaArrayInUint (JNIEnv *jenv, jlong **jarr, unsigned int **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned int[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned int)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUint (JNIEnv *jenv, jlong *jarr, unsigned int *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUint (JNIEnv *jenv, unsigned int *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* long[] support */
int SWIG_JavaArrayInLong (JNIEnv *jenv, jint **jarr, long **carr, jintArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetIntArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLong (JNIEnv *jenv, jint *jarr, long *carr, jintArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jint)carr[i];
  jenv->ReleaseIntArrayElements(input, jarr, 0);
}

jintArray SWIG_JavaArrayOutLong (JNIEnv *jenv, long *result, jsize sz) {
  jint *arr;
  int i;
  jintArray jresult = jenv->NewIntArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetIntArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jint)result[i];
  jenv->ReleaseIntArrayElements(jresult, arr, 0);
  return jresult;
}


/* unsigned long[] support */
int SWIG_JavaArrayInUlong (JNIEnv *jenv, jlong **jarr, unsigned long **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new unsigned long[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (unsigned long)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutUlong (JNIEnv *jenv, jlong *jarr, unsigned long *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutUlong (JNIEnv *jenv, unsigned long *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* jlong[] support */
int SWIG_JavaArrayInLonglong (JNIEnv *jenv, jlong **jarr, jlong **carr, jlongArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetLongArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new jlong[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (jlong)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutLonglong (JNIEnv *jenv, jlong *jarr, jlong *carr, jlongArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jlong)carr[i];
  jenv->ReleaseLongArrayElements(input, jarr, 0);
}

jlongArray SWIG_JavaArrayOutLonglong (JNIEnv *jenv, jlong *result, jsize sz) {
  jlong *arr;
  int i;
  jlongArray jresult = jenv->NewLongArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetLongArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jlong)result[i];
  jenv->ReleaseLongArrayElements(jresult, arr, 0);
  return jresult;
}


/* float[] support */
int SWIG_JavaArrayInFloat (JNIEnv *jenv, jfloat **jarr, float **carr, jfloatArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetFloatArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new float[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (float)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutFloat (JNIEnv *jenv, jfloat *jarr, float *carr, jfloatArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jfloat)carr[i];
  jenv->ReleaseFloatArrayElements(input, jarr, 0);
}

jfloatArray SWIG_JavaArrayOutFloat (JNIEnv *jenv, float *result, jsize sz) {
  jfloat *arr;
  int i;
  jfloatArray jresult = jenv->NewFloatArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetFloatArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jfloat)result[i];
  jenv->ReleaseFloatArrayElements(jresult, arr, 0);
  return jresult;
}


/* double[] support */
int SWIG_JavaArrayInDouble (JNIEnv *jenv, jdouble **jarr, double **carr, jdoubleArray input) {
  int i;
  jsize sz;
  if (!input) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null array");
    return 0;
  }
  sz = jenv->GetArrayLength(input);
  *jarr = jenv->GetDoubleArrayElements(input, 0);
  if (!*jarr)
    return 0; 
  *carr = new double[sz]; 
  if (!*carr) {
    SWIG_JavaThrowException(jenv, SWIG_JavaOutOfMemoryError, "array memory allocation failed");
    return 0;
  }
  for (i=0; i<sz; i++)
    (*carr)[i] = (double)(*jarr)[i];
  return 1;
}

void SWIG_JavaArrayArgoutDouble (JNIEnv *jenv, jdouble *jarr, double *carr, jdoubleArray input) {
  int i;
  jsize sz = jenv->GetArrayLength(input);
  for (i=0; i<sz; i++)
    jarr[i] = (jdouble)carr[i];
  jenv->ReleaseDoubleArrayElements(input, jarr, 0);
}

jdoubleArray SWIG_JavaArrayOutDouble (JNIEnv *jenv, double *result, jsize sz) {
  jdouble *arr;
  int i;
  jdoubleArray jresult = jenv->NewDoubleArray(sz);
  if (!jresult)
    return NULL;
  arr = jenv->GetDoubleArrayElements(jresult, 0);
  if (!arr)
    return NULL;
  for (i=0; i<sz; i++)
    arr[i] = (jdouble)result[i];
  jenv->ReleaseDoubleArrayElements(jresult, arr, 0);
  return jresult;
}


#endif

SWIGINTERN unsigned char FileGDBAPI_ShapeBuffer_get(FileGDBAPI::ShapeBuffer *self,int i){
    return self->shapeBuffer[i];
  }
SWIGINTERN void FileGDBAPI_ShapeBuffer_set(FileGDBAPI::ShapeBuffer *self,int i,unsigned char c){
    self->shapeBuffer[i] = c;
  }
SWIGINTERN unsigned char FileGDBAPI_ByteArray_get(FileGDBAPI::ByteArray *self,int i){
    return self->byteArray[i];
  }
SWIGINTERN void FileGDBAPI_ByteArray_set(FileGDBAPI::ByteArray *self,int i,unsigned char c){
    self->byteArray[i] = c;
  }

  std::wstring getErrorDescription(fgdbError hr) {
    std::wstring errorDescription;
    FileGDBAPI::ErrorInfo::GetErrorDescription(hr, errorDescription);
    return errorDescription;
  }


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1VectorOfString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::string > *)new std::vector< std::string >();
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1VectorOfString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::string >::size_type arg1 ;
  std::vector< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::string >::size_type)jarg1; 
  result = (std::vector< std::string > *)new std::vector< std::string >(arg1);
  *(std::vector< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfString_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfString_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = ((std::vector< std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfString_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (std::vector< std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfString_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  result = (bool)((std::vector< std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfString_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfString_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  std::vector< std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector< std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::string >::value_type *) &std_vector_Sl_std_string_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  int arg2 ;
  std::vector< std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1VectorOfString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::string > *arg1 = (std::vector< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1VectorOfWString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< std::wstring > *)new std::vector< std::wstring >();
  *(std::vector< std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1VectorOfWString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< std::wstring >::size_type arg1 ;
  std::vector< std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< std::wstring >::size_type)jarg1; 
  result = (std::vector< std::wstring > *)new std::vector< std::wstring >(arg1);
  *(std::vector< std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfWString_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  result = ((std::vector< std::wstring > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfWString_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  result = ((std::vector< std::wstring > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfWString_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  arg2 = (std::vector< std::wstring >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfWString_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  result = (bool)((std::vector< std::wstring > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfWString_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfWString_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  std::vector< std::wstring >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->push_back((std::vector< std::wstring >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfWString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  int arg2 ;
  std::vector< std::wstring >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< std::wstring >::value_type *) &std_vector_Sl_std_wstring_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfWString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  int arg2 ;
  std::vector< std::wstring >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  try {
    std_vector_Sl_std_wstring_Sg__set(arg1,arg2,(std::wstring const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1VectorOfWString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< std::wstring > *arg1 = (std::vector< std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< std::wstring > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_BoolValue_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  OutParamValue< bool > *arg1 = (OutParamValue< bool > *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< bool > **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_BoolValue_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  OutParamValue< bool > *arg1 = (OutParamValue< bool > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< bool > **)&jarg1; 
  result = (bool) ((arg1)->value);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1BoolValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OutParamValue< bool > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OutParamValue< bool > *)new OutParamValue< bool >();
  *(OutParamValue< bool > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1BoolValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OutParamValue< bool > *arg1 = (OutParamValue< bool > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OutParamValue< bool > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_DoubleValue_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  OutParamValue< double > *arg1 = (OutParamValue< double > *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< double > **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_DoubleValue_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  OutParamValue< double > *arg1 = (OutParamValue< double > *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< double > **)&jarg1; 
  result = (double) ((arg1)->value);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1DoubleValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OutParamValue< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OutParamValue< double > *)new OutParamValue< double >();
  *(OutParamValue< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1DoubleValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OutParamValue< double > *arg1 = (OutParamValue< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OutParamValue< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FloatValue_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  OutParamValue< float > *arg1 = (OutParamValue< float > *) 0 ;
  float arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< float > **)&jarg1; 
  arg2 = (float)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT jfloat JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FloatValue_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  OutParamValue< float > *arg1 = (OutParamValue< float > *) 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< float > **)&jarg1; 
  result = (float) ((arg1)->value);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1FloatValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OutParamValue< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OutParamValue< float > *)new OutParamValue< float >();
  *(OutParamValue< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1FloatValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OutParamValue< float > *arg1 = (OutParamValue< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OutParamValue< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_IntValue_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OutParamValue< int > *arg1 = (OutParamValue< int > *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_IntValue_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OutParamValue< int > *arg1 = (OutParamValue< int > *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< int > **)&jarg1; 
  result = (int) ((arg1)->value);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1IntValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OutParamValue< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OutParamValue< int > *)new OutParamValue< int >();
  *(OutParamValue< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1IntValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OutParamValue< int > *arg1 = (OutParamValue< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OutParamValue< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShortValue_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  OutParamValue< short > *arg1 = (OutParamValue< short > *) 0 ;
  short arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< short > **)&jarg1; 
  arg2 = (short)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT jshort JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShortValue_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  OutParamValue< short > *arg1 = (OutParamValue< short > *) 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< short > **)&jarg1; 
  result = (short) ((arg1)->value);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1ShortValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OutParamValue< short > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OutParamValue< short > *)new OutParamValue< short >();
  *(OutParamValue< short > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1ShortValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OutParamValue< short > *arg1 = (OutParamValue< short > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OutParamValue< short > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_StringValue_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OutParamValue< std::string > *arg1 = (OutParamValue< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if (arg1) (arg1)->value = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_StringValue_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OutParamValue< std::string > *arg1 = (OutParamValue< std::string > *) 0 ;
  std::string *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< std::string > **)&jarg1; 
  result = (std::string *) & ((arg1)->value);
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1StringValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OutParamValue< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OutParamValue< std::string > *)new OutParamValue< std::string >();
  *(OutParamValue< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1StringValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OutParamValue< std::string > *arg1 = (OutParamValue< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OutParamValue< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_WStringValue_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  OutParamValue< std::wstring > *arg1 = (OutParamValue< std::wstring > *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< std::wstring > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->value = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_WStringValue_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  OutParamValue< std::wstring > *arg1 = (OutParamValue< std::wstring > *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< std::wstring > **)&jarg1; 
  result = (std::wstring *) & ((arg1)->value);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1WStringValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OutParamValue< std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OutParamValue< std::wstring > *)new OutParamValue< std::wstring >();
  *(OutParamValue< std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1WStringValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OutParamValue< std::wstring > *arg1 = (OutParamValue< std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OutParamValue< std::wstring > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FieldTypeValue_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OutParamValue< FileGDBAPI::FieldType > *arg1 = (OutParamValue< FileGDBAPI::FieldType > *) 0 ;
  FileGDBAPI::FieldType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< FileGDBAPI::FieldType > **)&jarg1; 
  arg2 = (FileGDBAPI::FieldType)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FieldTypeValue_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OutParamValue< FileGDBAPI::FieldType > *arg1 = (OutParamValue< FileGDBAPI::FieldType > *) 0 ;
  FileGDBAPI::FieldType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< FileGDBAPI::FieldType > **)&jarg1; 
  result = (FileGDBAPI::FieldType) ((arg1)->value);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1FieldTypeValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OutParamValue< FileGDBAPI::FieldType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OutParamValue< FileGDBAPI::FieldType > *)new OutParamValue< FileGDBAPI::FieldType >();
  *(OutParamValue< FileGDBAPI::FieldType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1FieldTypeValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OutParamValue< FileGDBAPI::FieldType > *arg1 = (OutParamValue< FileGDBAPI::FieldType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OutParamValue< FileGDBAPI::FieldType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_GeometryTypeValue_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OutParamValue< FileGDBAPI::GeometryType > *arg1 = (OutParamValue< FileGDBAPI::GeometryType > *) 0 ;
  FileGDBAPI::GeometryType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< FileGDBAPI::GeometryType > **)&jarg1; 
  arg2 = (FileGDBAPI::GeometryType)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_GeometryTypeValue_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OutParamValue< FileGDBAPI::GeometryType > *arg1 = (OutParamValue< FileGDBAPI::GeometryType > *) 0 ;
  FileGDBAPI::GeometryType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< FileGDBAPI::GeometryType > **)&jarg1; 
  result = (FileGDBAPI::GeometryType) ((arg1)->value);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1GeometryTypeValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OutParamValue< FileGDBAPI::GeometryType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OutParamValue< FileGDBAPI::GeometryType > *)new OutParamValue< FileGDBAPI::GeometryType >();
  *(OutParamValue< FileGDBAPI::GeometryType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1GeometryTypeValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OutParamValue< FileGDBAPI::GeometryType > *arg1 = (OutParamValue< FileGDBAPI::GeometryType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OutParamValue< FileGDBAPI::GeometryType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeTypeValue_1value_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  OutParamValue< FileGDBAPI::ShapeType > *arg1 = (OutParamValue< FileGDBAPI::ShapeType > *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< FileGDBAPI::ShapeType > **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  if (arg1) (arg1)->value = arg2;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeTypeValue_1value_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  OutParamValue< FileGDBAPI::ShapeType > *arg1 = (OutParamValue< FileGDBAPI::ShapeType > *) 0 ;
  FileGDBAPI::ShapeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutParamValue< FileGDBAPI::ShapeType > **)&jarg1; 
  result = (FileGDBAPI::ShapeType) ((arg1)->value);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1ShapeTypeValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OutParamValue< FileGDBAPI::ShapeType > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OutParamValue< FileGDBAPI::ShapeType > *)new OutParamValue< FileGDBAPI::ShapeType >();
  *(OutParamValue< FileGDBAPI::ShapeType > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1ShapeTypeValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OutParamValue< FileGDBAPI::ShapeType > *arg1 = (OutParamValue< FileGDBAPI::ShapeType > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OutParamValue< FileGDBAPI::ShapeType > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jfloat JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FloatArrayValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  OutArrayParamValue< float > *arg1 = (OutArrayParamValue< float > *) 0 ;
  int arg2 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutArrayParamValue< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (float)(arg1)->get(arg2);
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FloatArrayValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  OutArrayParamValue< float > *arg1 = (OutArrayParamValue< float > *) 0 ;
  int arg2 ;
  float arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutArrayParamValue< float > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (float)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1FloatArrayValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OutArrayParamValue< float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OutArrayParamValue< float > *)new OutArrayParamValue< float >();
  *(OutArrayParamValue< float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1FloatArrayValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OutArrayParamValue< float > *arg1 = (OutArrayParamValue< float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OutArrayParamValue< float > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_DoubleArrayValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  OutArrayParamValue< double > *arg1 = (OutArrayParamValue< double > *) 0 ;
  int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutArrayParamValue< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (double)(arg1)->get(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_DoubleArrayValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  OutArrayParamValue< double > *arg1 = (OutArrayParamValue< double > *) 0 ;
  int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutArrayParamValue< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1DoubleArrayValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OutArrayParamValue< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OutArrayParamValue< double > *)new OutArrayParamValue< double >();
  *(OutArrayParamValue< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1DoubleArrayValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OutArrayParamValue< double > *arg1 = (OutArrayParamValue< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OutArrayParamValue< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_IntArrayValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  OutArrayParamValue< int > *arg1 = (OutArrayParamValue< int > *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutArrayParamValue< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->get(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_IntArrayValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  OutArrayParamValue< int > *arg1 = (OutArrayParamValue< int > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutArrayParamValue< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1IntArrayValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OutArrayParamValue< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OutArrayParamValue< int > *)new OutArrayParamValue< int >();
  *(OutArrayParamValue< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1IntArrayValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OutArrayParamValue< int > *arg1 = (OutArrayParamValue< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OutArrayParamValue< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jshort JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_UnsignedCharArrayValue_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  OutArrayParamValue< unsigned char > *arg1 = (OutArrayParamValue< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutArrayParamValue< unsigned char > **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)(arg1)->get(arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_UnsignedCharArrayValue_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  OutArrayParamValue< unsigned char > *arg1 = (OutArrayParamValue< unsigned char > *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(OutArrayParamValue< unsigned char > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  (arg1)->set(arg2,arg3);
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1UnsignedCharArrayValue(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  OutArrayParamValue< unsigned char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (OutArrayParamValue< unsigned char > *)new OutArrayParamValue< unsigned char >();
  *(OutArrayParamValue< unsigned char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1UnsignedCharArrayValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  OutArrayParamValue< unsigned char > *arg1 = (OutArrayParamValue< unsigned char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(OutArrayParamValue< unsigned char > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_CreateGeodatabase(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::wstring *arg1 = 0 ;
  FileGDBAPI::Geodatabase *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = *(FileGDBAPI::Geodatabase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Geodatabase & reference is null");
    return 0;
  } 
  result = (fgdbError)FileGDBAPI::CreateGeodatabase((std::wstring const &)*arg1,*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_OpenGeodatabase(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::wstring *arg1 = 0 ;
  FileGDBAPI::Geodatabase *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = *(FileGDBAPI::Geodatabase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Geodatabase & reference is null");
    return 0;
  } 
  result = (fgdbError)FileGDBAPI::OpenGeodatabase((std::wstring const &)*arg1,*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_CloseGeodatabase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Geodatabase & reference is null");
    return 0;
  } 
  result = (fgdbError)FileGDBAPI::CloseGeodatabase(*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_DeleteGeodatabase(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::wstring *arg1 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (fgdbError)FileGDBAPI::DeleteGeodatabase((std::wstring const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1GetDatasetTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::vector< std::wstring > *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  arg2 = *(std::vector< std::wstring > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::wstring > & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetDatasetTypes(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1GetDatasetRelationshipTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::vector< std::wstring > *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  arg2 = *(std::vector< std::wstring > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::wstring > & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetDatasetRelationshipTypes(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1GetChildDatasets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::vector< std::wstring > *arg4 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = *(std::vector< std::wstring > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::wstring > & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetChildDatasets((std::wstring const &)*arg2,(std::wstring const &)*arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1GetRelatedDatasets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  std::vector< std::wstring > *arg5 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    arg4_str.reserve(arg4_len);
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4_str.push_back((wchar_t)arg4_pstr[i]);
    }
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  arg5 = *(std::vector< std::wstring > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::wstring > & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetRelatedDatasets((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1GetDatasetDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jobject jarg4) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::string *arg4 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    jclass clazz = jenv->GetObjectClass(jarg4);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg4, cPointerField);
    OutParamValue<std::string> *wrapper = NULL;
    *(OutParamValue<std::string> **)&wrapper = *(OutParamValue<std::string> **)&cPtr;
    arg4 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetDatasetDefinition((std::wstring const &)*arg2,(std::wstring const &)*arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1GetChildDatasetDefinitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::vector< std::string > *arg4 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = *(std::vector< std::string > **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetChildDatasetDefinitions((std::wstring const &)*arg2,(std::wstring const &)*arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1GetRelatedDatasetDefinitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  std::vector< std::string > *arg5 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    arg4_str.reserve(arg4_len);
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4_str.push_back((wchar_t)arg4_pstr[i]);
    }
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  arg5 = *(std::vector< std::string > **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetRelatedDatasetDefinitions((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1GetDatasetDocumentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jobject jarg4) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::string *arg4 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    jclass clazz = jenv->GetObjectClass(jarg4);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg4, cPointerField);
    OutParamValue<std::string> *wrapper = NULL;
    *(OutParamValue<std::string> **)&wrapper = *(OutParamValue<std::string> **)&cPtr;
    arg4 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetDatasetDocumentation((std::wstring const &)*arg2,(std::wstring const &)*arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1CreateFeatureDataset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->CreateFeatureDataset((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1CreateTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::string *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  FileGDBAPI::Table *arg4 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = *(FileGDBAPI::Table **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Table & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->CreateTable((std::string const &)*arg2,(std::wstring const &)*arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1OpenTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::Table *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::Table **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Table & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->OpenTable((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1CloseTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  FileGDBAPI::Table *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  arg2 = *(FileGDBAPI::Table **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Table & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->CloseTable(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1Rename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    arg4_str.reserve(arg4_len);
    for (jsize i = 0; i < arg4_len; ++i) {
      arg4_str.push_back((wchar_t)arg4_pstr[i]);
    }
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  result = (fgdbError)(arg1)->Rename((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1Move(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (fgdbError)(arg1)->Move((std::wstring const &)*arg2,(std::wstring const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1Delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (fgdbError)(arg1)->Delete((std::wstring const &)*arg2,(std::wstring const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1GetDomains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::vector< std::wstring > *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  arg2 = *(std::vector< std::wstring > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::wstring > & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetDomains(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1CreateDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->CreateDomain((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1AlterDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->AlterDomain((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1DeleteDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (fgdbError)(arg1)->DeleteDomain((std::wstring const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1GetDomainDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::string *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    jclass clazz = jenv->GetObjectClass(jarg3);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg3, cPointerField);
    OutParamValue<std::string> *wrapper = NULL;
    *(OutParamValue<std::string> **)&wrapper = *(OutParamValue<std::string> **)&cPtr;
    arg3 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetDomainDefinition((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1GetQueryName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    jclass clazz = jenv->GetObjectClass(jarg3);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg3, cPointerField);
    OutParamValue<std::wstring> *wrapper = NULL;
    *(OutParamValue<std::wstring> **)&wrapper = *(OutParamValue<std::wstring> **)&cPtr;
    arg3 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetQueryName((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1ExecuteSQL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  bool arg3 ;
  FileGDBAPI::EnumRows *arg4 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = jarg3 ? true : false; 
  arg4 = *(FileGDBAPI::EnumRows **)&jarg4;
  if (!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::EnumRows & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->ExecuteSQL((std::wstring const &)*arg2,arg3,*arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1Geodatabase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Geodatabase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::Geodatabase *)new FileGDBAPI::Geodatabase();
  *(FileGDBAPI::Geodatabase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1Geodatabase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_createGeodatabase(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::wstring *arg1 = 0 ;
  FileGDBAPI::Geodatabase *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = *(FileGDBAPI::Geodatabase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Geodatabase & reference is null");
    return 0;
  } 
  result = (fgdbError)FileGDBAPI::CreateGeodatabase((std::wstring const &)*arg1,*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_openGeodatabase(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::wstring *arg1 = 0 ;
  FileGDBAPI::Geodatabase *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = *(FileGDBAPI::Geodatabase **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Geodatabase & reference is null");
    return 0;
  } 
  result = (fgdbError)FileGDBAPI::OpenGeodatabase((std::wstring const &)*arg1,*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_closeGeodatabase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Geodatabase & reference is null");
    return 0;
  } 
  result = (fgdbError)FileGDBAPI::CloseGeodatabase(*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_deleteGeodatabase(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::wstring *arg1 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  result = (fgdbError)FileGDBAPI::DeleteGeodatabase((std::wstring const &)*arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1GetDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<std::string> *wrapper = NULL;
    *(OutParamValue<std::string> **)&wrapper = *(OutParamValue<std::string> **)&cPtr;
    arg2 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetDefinition(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1GetDocumentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<std::string> *wrapper = NULL;
    *(OutParamValue<std::string> **)&wrapper = *(OutParamValue<std::string> **)&cPtr;
    arg2 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetDocumentation(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1SetDocumentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->SetDocumentation((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1GetFieldInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::FieldInfo *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::FieldInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::FieldInfo & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetFieldInformation(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1AddField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->AddField((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1AlterField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->AlterField((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1DeleteField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (fgdbError)(arg1)->DeleteField((std::wstring const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1GetIndexes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::vector< std::string > *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(std::vector< std::string > **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector< std::string > & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetIndexes(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1AddIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->AddIndex((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1DeleteIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (fgdbError)(arg1)->DeleteIndex((std::wstring const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1CreateSubtype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->CreateSubtype((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1AlterSubtype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (fgdbError)(arg1)->AlterSubtype((std::string const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1DeleteSubtype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (fgdbError)(arg1)->DeleteSubtype((std::wstring const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1EnableSubtypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  std::string *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (fgdbError)(arg1)->EnableSubtypes((std::wstring const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1GetDefaultSubtypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  int *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg2 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetDefaultSubtypeCode(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1SetDefaultSubtypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  int arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (fgdbError)(arg1)->SetDefaultSubtypeCode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1DisableSubtypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  result = (fgdbError)(arg1)->DisableSubtypes();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1Search_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5, jlong jarg6, jobject jarg6_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  FileGDBAPI::Envelope arg4 ;
  bool arg5 ;
  FileGDBAPI::EnumRows *arg6 = 0 ;
  FileGDBAPI::Envelope *argp4 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  (void)jarg6_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  argp4 = *(FileGDBAPI::Envelope **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null FileGDBAPI::Envelope");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  arg6 = *(FileGDBAPI::EnumRows **)&jarg6;
  if (!arg6) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::EnumRows & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->Search((std::wstring const &)*arg2,(std::wstring const &)*arg3,arg4,arg5,*arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1Search_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  bool arg4 ;
  FileGDBAPI::EnumRows *arg5 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = jarg4 ? true : false; 
  arg5 = *(FileGDBAPI::EnumRows **)&jarg5;
  if (!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::EnumRows & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->Search((std::wstring const &)*arg2,(std::wstring const &)*arg3,arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1CreateRowObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::Row *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::Row **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Row & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->CreateRowObject(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1Insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::Row *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::Row **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Row & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->Insert(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1Update(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::Row *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::Row **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Row & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->Update(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1Delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::Row *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::Row **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Row & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->Delete(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1IsEditable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  bool *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<bool> *wrapper = NULL;
    *(OutParamValue<bool> **)&wrapper = *(OutParamValue<bool> **)&cPtr;
    arg2 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->IsEditable(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1GetRowCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  int *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg2 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetRowCount(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1GetExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::Envelope *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::Envelope **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Envelope & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1SetWriteLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  result = (fgdbError)(arg1)->SetWriteLock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1FreeWriteLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  result = (fgdbError)(arg1)->FreeWriteLock();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1LoadOnlyMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  bool arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (fgdbError)(arg1)->LoadOnlyMode(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1Table(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Table *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::Table *)new FileGDBAPI::Table();
  *(FileGDBAPI::Table **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1Table(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1IsNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  bool *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    jclass clazz = jenv->GetObjectClass(jarg3);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg3, cPointerField);
    OutParamValue<bool> *wrapper = NULL;
    *(OutParamValue<bool> **)&wrapper = *(OutParamValue<bool> **)&cPtr;
    arg3 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->IsNull((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1SetNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (fgdbError)(arg1)->SetNull((std::wstring const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1GetOID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int32 *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg2 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetOID(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1GetGlobalID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  FileGDBAPI::Guid *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = *(FileGDBAPI::Guid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Guid & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetGlobalID(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1GetGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  FileGDBAPI::ShapeBuffer *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = *(FileGDBAPI::ShapeBuffer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::ShapeBuffer & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetGeometry(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1SetGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  FileGDBAPI::ShapeBuffer *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = *(FileGDBAPI::ShapeBuffer **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::ShapeBuffer const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->SetGeometry((FileGDBAPI::ShapeBuffer const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1GetShort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  short *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    jclass clazz = jenv->GetObjectClass(jarg3);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg3, cPointerField);
    OutParamValue<short> *wrapper = NULL;
    *(OutParamValue<short> **)&wrapper = *(OutParamValue<short> **)&cPtr;
    arg3 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetShort((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1SetShort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jshort jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  short arg3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (short)jarg3; 
  result = (fgdbError)(arg1)->SetShort((std::wstring const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1GetInteger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  int32 *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    jclass clazz = jenv->GetObjectClass(jarg3);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg3, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg3 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetInteger((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1SetInteger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  int32 arg3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (int32)jarg3; 
  result = (fgdbError)(arg1)->SetInteger((std::wstring const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1GetFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  float *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    jclass clazz = jenv->GetObjectClass(jarg3);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg3, cPointerField);
    OutParamValue<float> *wrapper = NULL;
    *(OutParamValue<float> **)&wrapper = *(OutParamValue<float> **)&cPtr;
    arg3 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetFloat((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1SetFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jfloat jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  float arg3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (float)jarg3; 
  result = (fgdbError)(arg1)->SetFloat((std::wstring const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1GetDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  double *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    jclass clazz = jenv->GetObjectClass(jarg3);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg3, cPointerField);
    OutParamValue<double> *wrapper = NULL;
    *(OutParamValue<double> **)&wrapper = *(OutParamValue<double> **)&cPtr;
    arg3 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetDouble((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1SetDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  double arg3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (double)jarg3; 
  result = (fgdbError)(arg1)->SetDouble((std::wstring const &)*arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1GetDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  tm *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(tm **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tm & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetDate((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1SetDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  tm *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(tm **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "tm const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->SetDate((std::wstring const &)*arg2,(tm const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1GetString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    jclass clazz = jenv->GetObjectClass(jarg3);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg3, cPointerField);
    OutParamValue<std::wstring> *wrapper = NULL;
    *(OutParamValue<std::wstring> **)&wrapper = *(OutParamValue<std::wstring> **)&cPtr;
    arg3 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetString((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1SetString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    arg3_str.reserve(arg3_len);
    for (jsize i = 0; i < arg3_len; ++i) {
      arg3_str.push_back((wchar_t)arg3_pstr[i]);
    }
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  result = (fgdbError)(arg1)->SetString((std::wstring const &)*arg2,(std::wstring const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1GetGUID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::Guid *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::Guid **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Guid & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetGUID((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1SetGUID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::Guid *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::Guid **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Guid const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->SetGUID((std::wstring const &)*arg2,(FileGDBAPI::Guid const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1GetXML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  std::string *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    jclass clazz = jenv->GetObjectClass(jarg3);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg3, cPointerField);
    OutParamValue<std::string> *wrapper = NULL;
    *(OutParamValue<std::string> **)&wrapper = *(OutParamValue<std::string> **)&cPtr;
    arg3 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetXML((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1SetXML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  std::string *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  result = (fgdbError)(arg1)->SetXML((std::wstring const &)*arg2,(std::string const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1GetRaster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::Raster *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::Raster **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Raster & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetRaster((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1SetRaster(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::Raster *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::Raster **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Raster const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->SetRaster((std::wstring const &)*arg2,(FileGDBAPI::Raster const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1GetBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::ByteArray *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::ByteArray **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::ByteArray & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetBinary((std::wstring const &)*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1SetBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::ByteArray *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::ByteArray **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::ByteArray const & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->SetBinary((std::wstring const &)*arg2,(FileGDBAPI::ByteArray const &)*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1GetFieldInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  FileGDBAPI::FieldInfo *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = *(FileGDBAPI::FieldInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::FieldInfo & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetFieldInformation(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1Row(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Row *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::Row *)new FileGDBAPI::Row();
  *(FileGDBAPI::Row **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1Row(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_EnumRows_1Next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::EnumRows *arg1 = (FileGDBAPI::EnumRows *) 0 ;
  FileGDBAPI::Row *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::EnumRows **)&jarg1; 
  arg2 = *(FileGDBAPI::Row **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Row & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->Next(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_EnumRows_1Close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FileGDBAPI::EnumRows *arg1 = (FileGDBAPI::EnumRows *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EnumRows **)&jarg1; 
  (arg1)->Close();
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_EnumRows_1GetFieldInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::EnumRows *arg1 = (FileGDBAPI::EnumRows *) 0 ;
  FileGDBAPI::FieldInfo *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::EnumRows **)&jarg1; 
  arg2 = *(FileGDBAPI::FieldInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::FieldInfo & reference is null");
    return 0;
  } 
  result = (fgdbError)(arg1)->GetFieldInformation(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1EnumRows(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::EnumRows *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::EnumRows *)new FileGDBAPI::EnumRows();
  *(FileGDBAPI::EnumRows **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1EnumRows(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::EnumRows *arg1 = (FileGDBAPI::EnumRows *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::EnumRows **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FieldInfo_1GetFieldCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  int *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg2 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetFieldCount(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FieldInfo_1GetFieldName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  int arg2 ;
  std::wstring *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    jclass clazz = jenv->GetObjectClass(jarg3);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg3, cPointerField);
    OutParamValue<std::wstring> *wrapper = NULL;
    *(OutParamValue<std::wstring> **)&wrapper = *(OutParamValue<std::wstring> **)&cPtr;
    arg3 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetFieldName(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FieldInfo_1GetFieldType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  int arg2 ;
  FileGDBAPI::FieldType *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    jclass clazz = jenv->GetObjectClass(jarg3);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg3, cPointerField);
    OutParamValue<FileGDBAPI::FieldType> *wrapper = NULL;
    *(OutParamValue<FileGDBAPI::FieldType> **)&wrapper = *(OutParamValue<FileGDBAPI::FieldType> **)&cPtr;
    arg3 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetFieldType(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FieldInfo_1GetFieldLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    jclass clazz = jenv->GetObjectClass(jarg3);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg3, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg3 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetFieldLength(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FieldInfo_1GetFieldIsNullable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jobject jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  int arg2 ;
  bool *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    jclass clazz = jenv->GetObjectClass(jarg3);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg3, cPointerField);
    OutParamValue<bool> *wrapper = NULL;
    *(OutParamValue<bool> **)&wrapper = *(OutParamValue<bool> **)&cPtr;
    arg3 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetFieldIsNullable(arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1FieldInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::FieldInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::FieldInfo *)new FileGDBAPI::FieldInfo();
  *(FileGDBAPI::FieldInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1FieldInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1Allocate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)(arg1)->Allocate(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1ShapeBuffer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  FileGDBAPI::ShapeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (FileGDBAPI::ShapeBuffer *)new FileGDBAPI::ShapeBuffer(arg1);
  *(FileGDBAPI::ShapeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1ShapeBuffer_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::ShapeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::ShapeBuffer *)new FileGDBAPI::ShapeBuffer();
  *(FileGDBAPI::ShapeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1ShapeBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1allocatedLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->allocatedLength = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1allocatedLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  result =  ((arg1)->allocatedLength);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1inUseLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->inUseLength = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1inUseLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  result =  ((arg1)->inUseLength);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1IsEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  result = (bool)((FileGDBAPI::ShapeBuffer const *)arg1)->IsEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1SetEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  (arg1)->SetEmpty();
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1GetShapeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<FileGDBAPI::ShapeType> *wrapper = NULL;
    *(OutParamValue<FileGDBAPI::ShapeType> **)&wrapper = *(OutParamValue<FileGDBAPI::ShapeType> **)&cPtr;
    arg2 = &wrapper->value;
  }
  result = (fgdbError)((FileGDBAPI::ShapeBuffer const *)arg1)->GetShapeType(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1GetGeometryType_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  FileGDBAPI::GeometryType *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<FileGDBAPI::GeometryType> *wrapper = NULL;
    *(OutParamValue<FileGDBAPI::GeometryType> **)&wrapper = *(OutParamValue<FileGDBAPI::GeometryType> **)&cPtr;
    arg2 = &wrapper->value;
  }
  result = (fgdbError)((FileGDBAPI::ShapeBuffer const *)arg1)->GetGeometryType(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1HasZs(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  result = (bool)FileGDBAPI::ShapeBuffer::HasZs(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1HasMs(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  result = (bool)FileGDBAPI::ShapeBuffer::HasMs(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1HasIDs(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  result = (bool)FileGDBAPI::ShapeBuffer::HasIDs(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1HasCurves(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  result = (bool)FileGDBAPI::ShapeBuffer::HasCurves(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1HasNormals(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  result = (bool)FileGDBAPI::ShapeBuffer::HasNormals(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1HasTextures(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  result = (bool)FileGDBAPI::ShapeBuffer::HasTextures(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1HasMaterials(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  result = (bool)FileGDBAPI::ShapeBuffer::HasMaterials(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1GetGeometryType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  FileGDBAPI::GeometryType result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  result = (FileGDBAPI::GeometryType)FileGDBAPI::ShapeBuffer::GetGeometryType(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  int arg2 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)FileGDBAPI_ShapeBuffer_get(arg1,arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  FileGDBAPI_ShapeBuffer_set(arg1,arg2,arg3);
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_PointShapeBuffer_1GetPoint(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::PointShapeBuffer *arg1 = (FileGDBAPI::PointShapeBuffer *) 0 ;
  FileGDBAPI::Point **arg2 = 0 ;
  FileGDBAPI::Point *temp2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::PointShapeBuffer **)&jarg1; 
  temp2 = *(FileGDBAPI::Point **)&jarg2;
  arg2 = &temp2; 
  result = (fgdbError)(arg1)->GetPoint(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_PointShapeBuffer_1GetZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::PointShapeBuffer *arg1 = (FileGDBAPI::PointShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::PointShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<double> *wrapper = NULL;
    *(OutArrayParamValue<double> **)&wrapper = *(OutArrayParamValue<double> **)&cPtr;
    double* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetZ(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_PointShapeBuffer_1GetM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::PointShapeBuffer *arg1 = (FileGDBAPI::PointShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::PointShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<double> *wrapper = NULL;
    *(OutArrayParamValue<double> **)&wrapper = *(OutArrayParamValue<double> **)&cPtr;
    double* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetM(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_PointShapeBuffer_1GetID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::PointShapeBuffer *arg1 = (FileGDBAPI::PointShapeBuffer *) 0 ;
  int **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::PointShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<int> *wrapper = NULL;
    *(OutArrayParamValue<int> **)&wrapper = *(OutArrayParamValue<int> **)&cPtr;
    int* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetID(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_PointShapeBuffer_1Setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::PointShapeBuffer *arg1 = (FileGDBAPI::PointShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::PointShapeBuffer **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  result = (fgdbError)(arg1)->Setup(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1PointShapeBuffer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::PointShapeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::PointShapeBuffer *)new FileGDBAPI::PointShapeBuffer();
  *(FileGDBAPI::PointShapeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1PointShapeBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::PointShapeBuffer *arg1 = (FileGDBAPI::PointShapeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::PointShapeBuffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPointShapeBuffer_1GetExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<double> *wrapper = NULL;
    *(OutArrayParamValue<double> **)&wrapper = *(OutArrayParamValue<double> **)&cPtr;
    double* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPointShapeBuffer_1GetNumPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  int *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg2 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetNumPoints(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPointShapeBuffer_1GetPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  FileGDBAPI::Point **arg2 = 0 ;
  FileGDBAPI::Point *temp2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  temp2 = *(FileGDBAPI::Point **)&jarg2;
  arg2 = &temp2; 
  result = (fgdbError)(arg1)->GetPoints(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPointShapeBuffer_1GetZExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<double> *wrapper = NULL;
    *(OutArrayParamValue<double> **)&wrapper = *(OutArrayParamValue<double> **)&cPtr;
    double* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetZExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPointShapeBuffer_1GetZs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<double> *wrapper = NULL;
    *(OutArrayParamValue<double> **)&wrapper = *(OutArrayParamValue<double> **)&cPtr;
    double* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetZs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPointShapeBuffer_1GetMExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<double> *wrapper = NULL;
    *(OutArrayParamValue<double> **)&wrapper = *(OutArrayParamValue<double> **)&cPtr;
    double* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetMExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPointShapeBuffer_1GetMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<double> *wrapper = NULL;
    *(OutArrayParamValue<double> **)&wrapper = *(OutArrayParamValue<double> **)&cPtr;
    double* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetMs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPointShapeBuffer_1GetIDs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  int **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<int> *wrapper = NULL;
    *(OutArrayParamValue<int> **)&wrapper = *(OutArrayParamValue<int> **)&cPtr;
    int* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetIDs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPointShapeBuffer_1Setup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  int arg3 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  arg3 = (int)jarg3; 
  result = (fgdbError)(arg1)->Setup(arg2,arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPointShapeBuffer_1CalculateExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  result = (fgdbError)(arg1)->CalculateExtent();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1MultiPointShapeBuffer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::MultiPointShapeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::MultiPointShapeBuffer *)new FileGDBAPI::MultiPointShapeBuffer();
  *(FileGDBAPI::MultiPointShapeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1MultiPointShapeBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::MultiPointShapeBuffer *arg1 = (FileGDBAPI::MultiPointShapeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPartShapeBuffer_1GetExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<double> *wrapper = NULL;
    *(OutArrayParamValue<double> **)&wrapper = *(OutArrayParamValue<double> **)&cPtr;
    double* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPartShapeBuffer_1GetNumParts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  int *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg2 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetNumParts(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPartShapeBuffer_1GetNumPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  int *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg2 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetNumPoints(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPartShapeBuffer_1GetParts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  int **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<int> *wrapper = NULL;
    *(OutArrayParamValue<int> **)&wrapper = *(OutArrayParamValue<int> **)&cPtr;
    int* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetParts(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPartShapeBuffer_1GetPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  FileGDBAPI::Point **arg2 = 0 ;
  FileGDBAPI::Point *temp2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  temp2 = *(FileGDBAPI::Point **)&jarg2;
  arg2 = &temp2; 
  result = (fgdbError)(arg1)->GetPoints(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPartShapeBuffer_1GetZExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<double> *wrapper = NULL;
    *(OutArrayParamValue<double> **)&wrapper = *(OutArrayParamValue<double> **)&cPtr;
    double* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetZExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPartShapeBuffer_1GetZs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<double> *wrapper = NULL;
    *(OutArrayParamValue<double> **)&wrapper = *(OutArrayParamValue<double> **)&cPtr;
    double* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetZs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPartShapeBuffer_1GetMExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<double> *wrapper = NULL;
    *(OutArrayParamValue<double> **)&wrapper = *(OutArrayParamValue<double> **)&cPtr;
    double* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetMExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPartShapeBuffer_1GetMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<double> *wrapper = NULL;
    *(OutArrayParamValue<double> **)&wrapper = *(OutArrayParamValue<double> **)&cPtr;
    double* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetMs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPartShapeBuffer_1GetNumCurves(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  int *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg2 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetNumCurves(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPartShapeBuffer_1GetCurves(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  byte **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<unsigned char> *wrapper = NULL;
    *(OutArrayParamValue<unsigned char> **)&wrapper = *(OutArrayParamValue<unsigned char> **)&cPtr;
    unsigned char* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetCurves(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPartShapeBuffer_1GetIDs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  int **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<int> *wrapper = NULL;
    *(OutArrayParamValue<int> **)&wrapper = *(OutArrayParamValue<int> **)&cPtr;
    int* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetIDs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPartShapeBuffer_1Setup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (fgdbError)(arg1)->Setup(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPartShapeBuffer_1Setup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  int arg3 ;
  int arg4 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (fgdbError)(arg1)->Setup(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPartShapeBuffer_1CalculateExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  result = (fgdbError)(arg1)->CalculateExtent();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPartShapeBuffer_1PackCurves(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  result = (fgdbError)(arg1)->PackCurves();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1MultiPartShapeBuffer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::MultiPartShapeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::MultiPartShapeBuffer *)new FileGDBAPI::MultiPartShapeBuffer();
  *(FileGDBAPI::MultiPartShapeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1MultiPartShapeBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::MultiPartShapeBuffer *arg1 = (FileGDBAPI::MultiPartShapeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1GetExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<double> *wrapper = NULL;
    *(OutArrayParamValue<double> **)&wrapper = *(OutArrayParamValue<double> **)&cPtr;
    double* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1GetNumParts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  int *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg2 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetNumParts(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1GetNumPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  int *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg2 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->GetNumPoints(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1GetParts(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  int **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<int> *wrapper = NULL;
    *(OutArrayParamValue<int> **)&wrapper = *(OutArrayParamValue<int> **)&cPtr;
    int* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetParts(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1GetPartDescriptors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  int **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<int> *wrapper = NULL;
    *(OutArrayParamValue<int> **)&wrapper = *(OutArrayParamValue<int> **)&cPtr;
    int* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetPartDescriptors(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1GetPoints(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  FileGDBAPI::Point **arg2 = 0 ;
  FileGDBAPI::Point *temp2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  temp2 = *(FileGDBAPI::Point **)&jarg2;
  arg2 = &temp2; 
  result = (fgdbError)(arg1)->GetPoints(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1GetZExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<double> *wrapper = NULL;
    *(OutArrayParamValue<double> **)&wrapper = *(OutArrayParamValue<double> **)&cPtr;
    double* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetZExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1GetZs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<double> *wrapper = NULL;
    *(OutArrayParamValue<double> **)&wrapper = *(OutArrayParamValue<double> **)&cPtr;
    double* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetZs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1GetMExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<double> *wrapper = NULL;
    *(OutArrayParamValue<double> **)&wrapper = *(OutArrayParamValue<double> **)&cPtr;
    double* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetMExtent(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1GetMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  double **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<double> *wrapper = NULL;
    *(OutArrayParamValue<double> **)&wrapper = *(OutArrayParamValue<double> **)&cPtr;
    double* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetMs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1GetIDs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  int **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<int> *wrapper = NULL;
    *(OutArrayParamValue<int> **)&wrapper = *(OutArrayParamValue<int> **)&cPtr;
    int* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetIDs(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1GetNormals(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  float **arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutArrayParamValue<float> *wrapper = NULL;
    *(OutArrayParamValue<float> **)&wrapper = *(OutArrayParamValue<float> **)&cPtr;
    float* value = wrapper->getOutParamArrayValue();
    arg2 = &value;
  }
  result = (fgdbError)(arg1)->GetNormals(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1GetTextures(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jobject jarg3, jobject jarg4, jobject jarg5) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int **arg4 = 0 ;
  float **arg5 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg2 = &wrapper->value;
  }
  {
    jclass clazz = jenv->GetObjectClass(jarg3);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg3, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg3 = &wrapper->value;
  }
  {
    jclass clazz = jenv->GetObjectClass(jarg4);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg4, cPointerField);
    OutArrayParamValue<int> *wrapper = NULL;
    *(OutArrayParamValue<int> **)&wrapper = *(OutArrayParamValue<int> **)&cPtr;
    int* value = wrapper->getOutParamArrayValue();
    arg4 = &value;
  }
  {
    jclass clazz = jenv->GetObjectClass(jarg5);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg5, cPointerField);
    OutArrayParamValue<float> *wrapper = NULL;
    *(OutArrayParamValue<float> **)&wrapper = *(OutArrayParamValue<float> **)&cPtr;
    float* value = wrapper->getOutParamArrayValue();
    arg5 = &value;
  }
  result = (fgdbError)(arg1)->GetTextures(*arg2,*arg3,*arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1GetMaterials(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2, jobject jarg3, jobject jarg4, jobject jarg5) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  int *arg2 = 0 ;
  int *arg3 = 0 ;
  int **arg4 = 0 ;
  byte **arg5 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg2 = &wrapper->value;
  }
  {
    jclass clazz = jenv->GetObjectClass(jarg3);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg3, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg3 = &wrapper->value;
  }
  {
    jclass clazz = jenv->GetObjectClass(jarg4);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg4, cPointerField);
    OutArrayParamValue<int> *wrapper = NULL;
    *(OutArrayParamValue<int> **)&wrapper = *(OutArrayParamValue<int> **)&cPtr;
    int* value = wrapper->getOutParamArrayValue();
    arg4 = &value;
  }
  {
    jclass clazz = jenv->GetObjectClass(jarg5);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg5, cPointerField);
    OutArrayParamValue<unsigned char> *wrapper = NULL;
    *(OutArrayParamValue<unsigned char> **)&wrapper = *(OutArrayParamValue<unsigned char> **)&cPtr;
    unsigned char* value = wrapper->getOutParamArrayValue();
    arg5 = &value;
  }
  result = (fgdbError)(arg1)->GetMaterials(*arg2,*arg3,*arg4,*arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1Setup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6, jint jarg7) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = (fgdbError)(arg1)->Setup(arg2,arg3,arg4,arg5,arg6,arg7);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1Setup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jint jarg6) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  result = (fgdbError)(arg1)->Setup(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1Setup_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (fgdbError)(arg1)->Setup(arg2,arg3,arg4,arg5);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1Setup_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType arg2 ;
  int arg3 ;
  int arg4 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  arg2 = (FileGDBAPI::ShapeType)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (fgdbError)(arg1)->Setup(arg2,arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_MultiPatchShapeBuffer_1CalculateExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  result = (fgdbError)(arg1)->CalculateExtent();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1MultiPatchShapeBuffer(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::MultiPatchShapeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::MultiPatchShapeBuffer *)new FileGDBAPI::MultiPatchShapeBuffer();
  *(FileGDBAPI::MultiPatchShapeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1MultiPatchShapeBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::MultiPatchShapeBuffer *arg1 = (FileGDBAPI::MultiPatchShapeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ByteArray_1Allocate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  arg2 = (size_t)jarg2; 
  result = (bool)(arg1)->Allocate(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1ByteArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  FileGDBAPI::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  result = (FileGDBAPI::ByteArray *)new FileGDBAPI::ByteArray(arg1);
  *(FileGDBAPI::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1ByteArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::ByteArray *)new FileGDBAPI::ByteArray();
  *(FileGDBAPI::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1ByteArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ByteArray_1allocatedLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->allocatedLength = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ByteArray_1allocatedLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  result =  ((arg1)->allocatedLength);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ByteArray_1inUseLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->inUseLength = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ByteArray_1inUseLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  result =  ((arg1)->inUseLength);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ByteArray_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  int arg2 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (unsigned char)FileGDBAPI_ByteArray_get(arg1,arg2);
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ByteArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  FileGDBAPI_ByteArray_set(arg1,arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1IsEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (bool)(arg1)->IsEmpty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1SetEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  (arg1)->SetEmpty();
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1Envelope_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Envelope *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::Envelope *)new FileGDBAPI::Envelope();
  *(FileGDBAPI::Envelope **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1Envelope_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  FileGDBAPI::Envelope *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  result = (FileGDBAPI::Envelope *)new FileGDBAPI::Envelope(arg1,arg2,arg3,arg4);
  *(FileGDBAPI::Envelope **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1Envelope(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1xMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->xMin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1xMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->xMin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1yMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->yMin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1yMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->yMin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1xMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->xMax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1xMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->xMax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1yMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->yMax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1yMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->yMax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1zMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->zMin = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1zMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->zMin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1zMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->zMax = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1zMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->zMax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Point_1x_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Point *arg1 = (FileGDBAPI::Point *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Point **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->x = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Point_1x_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Point *arg1 = (FileGDBAPI::Point *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Point **)&jarg1; 
  result = (double) ((arg1)->x);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Point_1y_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Point *arg1 = (FileGDBAPI::Point *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Point **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->y = arg2;
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Point_1y_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Point *arg1 = (FileGDBAPI::Point *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Point **)&jarg1; 
  result = (double) ((arg1)->y);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1Point(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Point *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::Point *)new FileGDBAPI::Point();
  *(FileGDBAPI::Point **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1Point(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Point *arg1 = (FileGDBAPI::Point *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Point **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1Guid(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Guid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::Guid *)new FileGDBAPI::Guid();
  *(FileGDBAPI::Guid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1Guid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1SetNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  (arg1)->SetNull();
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1Create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  (arg1)->Create();
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1FromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  result = (fgdbError)(arg1)->FromString((std::wstring const &)*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1ToString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jobject jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<std::wstring> *wrapper = NULL;
    *(OutParamValue<std::wstring> **)&wrapper = *(OutParamValue<std::wstring> **)&cPtr;
    arg2 = &wrapper->value;
  }
  result = (fgdbError)(arg1)->ToString(*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  FileGDBAPI::Guid *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  arg2 = *(FileGDBAPI::Guid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Guid const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->operator ==((FileGDBAPI::Guid const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1notEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  FileGDBAPI::Guid *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  arg2 = *(FileGDBAPI::Guid **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Guid const & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->operator !=((FileGDBAPI::Guid const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1data1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  uint32 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  arg2 = (uint32)jarg2; 
  if (arg1) (arg1)->data1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1data1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  uint32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  result = (uint32) ((arg1)->data1);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1data2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->data2 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1data2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  result = (uint16) ((arg1)->data2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1data3_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  uint16 arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  arg2 = (uint16)jarg2; 
  if (arg1) (arg1)->data3 = arg2;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1data3_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  uint16 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  result = (uint16) ((arg1)->data3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1data4_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshortArray jarg2) {
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  byte *arg2 ;
  jshort *jarr2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  if (jarg2 && jenv->GetArrayLength(jarg2) != 8) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, "incorrect array size");
    return ;
  }
  if (!SWIG_JavaArrayInUchar(jenv, &jarr2, &arg2, jarg2)) return ; 
  {
    size_t ii;
    byte *b = (byte *) arg1->data4;
    for (ii = 0; ii < (size_t)8; ii++) b[ii] = *((byte *) arg2 + ii);
  }
  SWIG_JavaArrayArgoutUchar(jenv, jarr2, arg2, jarg2); 
  delete [] arg2; 
}


SWIGEXPORT jshortArray JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1data4_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshortArray jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  byte *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  result = (byte *)(byte *) ((arg1)->data4);
  jresult = SWIG_JavaArrayOutUchar(jenv, result, 8); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_GetErrorDescription(JNIEnv *jenv, jclass jcls, jint jarg1, jobject jarg2) {
  jint jresult = 0 ;
  fgdbError arg1 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (fgdbError)jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<std::wstring> *wrapper = NULL;
    *(OutParamValue<std::wstring> **)&wrapper = *(OutParamValue<std::wstring> **)&cPtr;
    arg2 = &wrapper->value;
  }
  result = (fgdbError)FileGDBAPI::ErrorInfo::GetErrorDescription(arg1,*arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_GetErrorRecordCount(JNIEnv *jenv, jclass jcls, jobject jarg1) {
  int *arg1 = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    jclass clazz = jenv->GetObjectClass(jarg1);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg1, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg1 = &wrapper->value;
  }
  FileGDBAPI::ErrorInfo::GetErrorRecordCount(*arg1);
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_GetErrorRecord(JNIEnv *jenv, jclass jcls, jint jarg1, jobject jarg2, jobject jarg3) {
  jint jresult = 0 ;
  int arg1 ;
  fgdbError *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    jclass clazz = jenv->GetObjectClass(jarg2);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg2, cPointerField);
    OutParamValue<int> *wrapper = NULL;
    *(OutParamValue<int> **)&wrapper = *(OutParamValue<int> **)&cPtr;
    arg2 = &wrapper->value;
  }
  {
    jclass clazz = jenv->GetObjectClass(jarg3);
    jfieldID cPointerField = jenv->GetFieldID(clazz, "swigCPtr", "J");
    jlong cPtr = jenv->GetLongField(jarg3, cPointerField);
    OutParamValue<std::wstring> *wrapper = NULL;
    *(OutParamValue<std::wstring> **)&wrapper = *(OutParamValue<std::wstring> **)&cPtr;
    arg3 = &wrapper->value;
  }
  result = (fgdbError)FileGDBAPI::ErrorInfo::GetErrorRecord(arg1,*arg2,*arg3);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ClearErrors(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  FileGDBAPI::ErrorInfo::ClearErrors();
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_SpatialReferenceInfo_1auth_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->auth_name = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_SpatialReferenceInfo_1auth_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  result = (std::wstring *) & ((arg1)->auth_name);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_SpatialReferenceInfo_1auth_1srid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->auth_srid = arg2;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_SpatialReferenceInfo_1auth_1srid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  result = (int) ((arg1)->auth_srid);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_SpatialReferenceInfo_1srtext_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->srtext = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_SpatialReferenceInfo_1srtext_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  result = (std::wstring *) & ((arg1)->srtext);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_SpatialReferenceInfo_1srname_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    arg2_str.reserve(arg2_len);
    for (jsize i = 0; i < arg2_len; ++i) {
      arg2_str.push_back((wchar_t)arg2_pstr[i]);
    }
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if (arg1) (arg1)->srname = *arg2;
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_SpatialReferenceInfo_1srname_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  std::wstring *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  result = (std::wstring *) & ((arg1)->srname);
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1SpatialReferenceInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::SpatialReferenceInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::SpatialReferenceInfo *)new FileGDBAPI::SpatialReferenceInfo();
  *(FileGDBAPI::SpatialReferenceInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1SpatialReferenceInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::SpatialReferenceInfo *arg1 = (FileGDBAPI::SpatialReferenceInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1EnumSpatialReferenceInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::EnumSpatialReferenceInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::EnumSpatialReferenceInfo *)new FileGDBAPI::EnumSpatialReferenceInfo();
  *(FileGDBAPI::EnumSpatialReferenceInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1EnumSpatialReferenceInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::EnumSpatialReferenceInfo *arg1 = (FileGDBAPI::EnumSpatialReferenceInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::EnumSpatialReferenceInfo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_EnumSpatialReferenceInfo_1NextGeographicSpatialReference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  FileGDBAPI::EnumSpatialReferenceInfo *arg1 = (FileGDBAPI::EnumSpatialReferenceInfo *) 0 ;
  FileGDBAPI::SpatialReferenceInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::EnumSpatialReferenceInfo **)&jarg1; 
  arg2 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::SpatialReferenceInfo & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->NextGeographicSpatialReference(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_EnumSpatialReferenceInfo_1NextProjectedSpatialReference(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  FileGDBAPI::EnumSpatialReferenceInfo *arg1 = (FileGDBAPI::EnumSpatialReferenceInfo *) 0 ;
  FileGDBAPI::SpatialReferenceInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::EnumSpatialReferenceInfo **)&jarg1; 
  arg2 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::SpatialReferenceInfo & reference is null");
    return 0;
  } 
  result = (bool)(arg1)->NextProjectedSpatialReference(*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_EnumSpatialReferenceInfo_1Reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FileGDBAPI::EnumSpatialReferenceInfo *arg1 = (FileGDBAPI::EnumSpatialReferenceInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EnumSpatialReferenceInfo **)&jarg1; 
  (arg1)->Reset();
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FindSpatialReferenceBySRID(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  int arg1 ;
  FileGDBAPI::SpatialReferenceInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = (int)jarg1; 
  arg2 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::SpatialReferenceInfo & reference is null");
    return 0;
  } 
  result = (bool)FileGDBAPI::SpatialReferences::FindSpatialReferenceBySRID(arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FindSpatialReferenceByName(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::wstring *arg1 = 0 ;
  FileGDBAPI::SpatialReferenceInfo *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    arg1_str.reserve(arg1_len);
    for (jsize i = 0; i < arg1_len; ++i) {
      arg1_str.push_back((wchar_t)arg1_pstr[i]);
    }
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = *(FileGDBAPI::SpatialReferenceInfo **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::SpatialReferenceInfo & reference is null");
    return 0;
  } 
  result = (bool)FileGDBAPI::SpatialReferences::FindSpatialReferenceByName((std::wstring const &)*arg1,*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1Raster(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Raster *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (FileGDBAPI::Raster *)new FileGDBAPI::Raster();
  *(FileGDBAPI::Raster **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1Raster(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Raster *arg1 = (FileGDBAPI::Raster *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Raster **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_getErrorDescription(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  fgdbError arg1 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (fgdbError)jarg1; 
  result = getErrorDescription(arg1);
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_SWIGPointShapeBufferUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FileGDBAPI::ShapeBuffer **)&baseptr = *(FileGDBAPI::PointShapeBuffer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_SWIGMultiPointShapeBufferUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FileGDBAPI::ShapeBuffer **)&baseptr = *(FileGDBAPI::MultiPointShapeBuffer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_SWIGMultiPartShapeBufferUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FileGDBAPI::ShapeBuffer **)&baseptr = *(FileGDBAPI::MultiPartShapeBuffer **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_SWIGMultiPatchShapeBufferUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(FileGDBAPI::ShapeBuffer **)&baseptr = *(FileGDBAPI::MultiPatchShapeBuffer **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

