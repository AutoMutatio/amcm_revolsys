/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else



#include <stdexcept>
#include <sstream>
#include "time.h"
#include "FileGDBAPI.h"

std::string wstring2string(std::wstring wstr) {
  std::string str(wstr.length(),' ');
  copy(wstr.begin(),wstr.end(),str.begin());
  return str;
}

  
fgdbError checkResult(fgdbError error) {
  if (error) {
     std::wstring errorString;
     FileGDBAPI::ErrorInfo::GetErrorDescription(error, errorString);
     std::stringstream message;
     message << error << "\t" << wstring2string(errorString);
     throw std::runtime_error(message.str());
  }
  return error;
}

void handleRuntimeError(JNIEnv *jenv, const std::runtime_error e) {
  std::stringstream message;
  message << e.what();
  int count;
  FileGDBAPI::ErrorInfo::GetErrorRecordCount(count);
  for (int i = 0; i < count; i++) {
    int num;
    std::wstring description;
    FileGDBAPI::ErrorInfo::GetErrorRecord(i, num, description);
    message << "\n" << num << "\t" << wstring2string(description);
    FileGDBAPI::ErrorInfo::ClearErrors();
    
  }
  jclass clazz = jenv->FindClass("java/lang/RuntimeException");
  jenv->ThrowNew(clazz, message.str().c_str());
}
  


#include <stdexcept>


#include <vector>
#include <stdexcept>


#include <string>


template<class T> class OutParamValue {
  public:
    T value;
};


template<class T> class OutArrayParamValue {
  public:
    T* outArrayParamValue;

    OutArrayParamValue() {
    };
    
    const T& get(int i) {
      return this->outArrayParamValue[i];
    };
    
    void set(int i, const T& value) {
      this->outArrayParamValue[i] = value;
    };
};

SWIGINTERN std::vector<std::string >::const_reference std_vector_Sl_std_string_Sg__get(std::vector<std::string > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_string_Sg__set(std::vector<std::string > *self,int i,std::vector<std::string >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<std::wstring >::const_reference std_vector_Sl_std_wstring_Sg__get(std::vector<std::wstring > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_std_wstring_Sg__set(std::vector<std::wstring > *self,int i,std::vector<std::wstring >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

template<class T> class ArrayOut {
  public:
    T* arrayOut;

    ArrayOut() {
    };
    
    const T& get(int i) {
      return this->arrayOut[i];
    };
    
    void set(int i, const T& value) {
      this->arrayOut[i] = value;
    };
};


  FileGDBAPI::Geodatabase* createGeodatabase(const std::wstring& path) {
    FileGDBAPI::Geodatabase* value = new FileGDBAPI::Geodatabase();
    checkResult(FileGDBAPI::CreateGeodatabase(path, *value));
    return value;
  }
  FileGDBAPI::Geodatabase* openGeodatabase(const std::wstring& path) {
    FileGDBAPI::Geodatabase* value = new FileGDBAPI::Geodatabase();
    checkResult(FileGDBAPI::OpenGeodatabase(path, *value));
    return value;
  }
  
  std::wstring getSpatialReferenceWkt(int srid) {
    FileGDBAPI::SpatialReferenceInfo value;
    FileGDBAPI::SpatialReferences::FindSpatialReferenceBySRID(srid, value);
    return value.srtext;
  }

SWIGINTERN void FileGDBAPI_Geodatabase_createFeatureDataset(FileGDBAPI::Geodatabase *self,std::string featureDatasetDef){
    checkResult(self->CreateFeatureDataset(featureDatasetDef));
  }
SWIGINTERN std::vector<std::wstring > FileGDBAPI_Geodatabase_getChildDatasets(FileGDBAPI::Geodatabase *self,std::wstring parentPath,std::wstring datasetType){
    std::vector<std::wstring> value;
    checkResult(self->GetChildDatasets(parentPath, datasetType, value));
    return value;
  }
SWIGINTERN std::string FileGDBAPI_Geodatabase_getDatasetDefinition(FileGDBAPI::Geodatabase *self,std::wstring path,std::wstring datasetType){
    std::string value;
    checkResult(self->GetDatasetDefinition(path, datasetType, value));
    return value;
  }
SWIGINTERN std::string FileGDBAPI_Geodatabase_getDatasetDocumentation(FileGDBAPI::Geodatabase *self,std::wstring path,std::wstring datasetType){
    std::string value;
    checkResult(self->GetDatasetDocumentation(path, datasetType, value));
    return value;
  }
SWIGINTERN std::vector<std::wstring > FileGDBAPI_Geodatabase_getDomains(FileGDBAPI::Geodatabase *self){
    std::vector<std::wstring> value;
    checkResult(self->GetDomains(value));
    return value;
  }
SWIGINTERN std::string FileGDBAPI_Geodatabase_getDomainDefinition(FileGDBAPI::Geodatabase *self,std::wstring domainName){
    std::string value;
    checkResult(self->GetDomainDefinition(domainName, value));
    return value;
  }
SWIGINTERN void FileGDBAPI_Geodatabase_createDomain(FileGDBAPI::Geodatabase *self,std::string const &domainDefinition){
    checkResult(self->CreateDomain(domainDefinition));
  }
SWIGINTERN void FileGDBAPI_Geodatabase_alterDomain(FileGDBAPI::Geodatabase *self,std::string const &domainDefinition){
    checkResult(self->AlterDomain(domainDefinition));
  }
SWIGINTERN void FileGDBAPI_Geodatabase_deleteDomain(FileGDBAPI::Geodatabase *self,std::wstring const &domainName){
    checkResult(self->DeleteDomain(domainName));
  }
SWIGINTERN std::wstring FileGDBAPI_Geodatabase_getQueryName(FileGDBAPI::Geodatabase *self,std::wstring path){
    std::wstring value;
    checkResult(self->GetQueryName(path, value));
    return value;
  }
SWIGINTERN FileGDBAPI::Table *FileGDBAPI_Geodatabase_openTable(FileGDBAPI::Geodatabase *self,std::wstring const &path){
    FileGDBAPI::Table* value = new FileGDBAPI::Table();
    checkResult(self->OpenTable(path, *value));
    return value;
  }
SWIGINTERN FileGDBAPI::Table *FileGDBAPI_Geodatabase_createTable(FileGDBAPI::Geodatabase *self,std::string const &tableDefinition,std::wstring const &parent){
    FileGDBAPI::Table* value = new FileGDBAPI::Table();
    checkResult(self->CreateTable(tableDefinition, parent, *value));
    return value;
  }
SWIGINTERN bool FileGDBAPI_Table_isEditable(FileGDBAPI::Table *self){
    bool value;
    checkResult(self->IsEditable(value));
    return value;
  }
SWIGINTERN std::string FileGDBAPI_Table_getDefinition(FileGDBAPI::Table *self){
    std::string value;
    checkResult(self->GetDefinition(value));
    return value;
  }
SWIGINTERN std::string FileGDBAPI_Table_getDocumentation(FileGDBAPI::Table *self){
    std::string value;
    checkResult(self->GetDocumentation(value));
    return value;
  }
SWIGINTERN int FileGDBAPI_Table_getRowCount(FileGDBAPI::Table *self){
    int value;
    checkResult(self->GetRowCount(value));
    return value;
  }
SWIGINTERN int FileGDBAPI_Table_getDefaultSubtypeCode(FileGDBAPI::Table *self){
    int value;
    checkResult(self->GetDefaultSubtypeCode(value));
    return value;
  }
SWIGINTERN std::vector<std::string > FileGDBAPI_Table_getIndexes(FileGDBAPI::Table *self){
    std::vector<std::string> value;
    checkResult(self->GetIndexes(value));
    return value;
  }
SWIGINTERN FileGDBAPI::Row *FileGDBAPI_Table_createRowObject(FileGDBAPI::Table *self){
    FileGDBAPI::Row* value = new FileGDBAPI::Row();
    checkResult(self->CreateRowObject(*value));
    return value;
  }
SWIGINTERN void FileGDBAPI_Table_insertRow(FileGDBAPI::Table *self,FileGDBAPI::Row &row){
    checkResult(self->Insert(row));
  }
SWIGINTERN void FileGDBAPI_Table_updateRow(FileGDBAPI::Table *self,FileGDBAPI::Row &row){
    checkResult(self->Update(row));
  }
SWIGINTERN void FileGDBAPI_Table_deleteRow(FileGDBAPI::Table *self,FileGDBAPI::Row &row){
    checkResult(self->Delete(row));
  }
SWIGINTERN FileGDBAPI::EnumRows *FileGDBAPI_Table_search__SWIG_0(FileGDBAPI::Table *self,std::wstring const &subfields,std::wstring const &whereClause,FileGDBAPI::Envelope envelope,bool recycling){
    FileGDBAPI::EnumRows* rows = new FileGDBAPI::EnumRows();
    checkResult(self->Search(subfields, whereClause, envelope, recycling, *rows));
    return rows;
  }
SWIGINTERN FileGDBAPI::EnumRows *FileGDBAPI_Table_search__SWIG_1(FileGDBAPI::Table *self,std::wstring const &subfields,std::wstring const &whereClause,bool recycling){
    FileGDBAPI::EnumRows* rows = new FileGDBAPI::EnumRows();
    checkResult(self->Search(subfields, whereClause, recycling, *rows));
    return rows;
  }
SWIGINTERN bool FileGDBAPI_Row_isNull(FileGDBAPI::Row *self,std::wstring name){
    bool value;
    checkResult(self->IsNull(name,value));
    return value;
  }
SWIGINTERN void FileGDBAPI_Row_setNull(FileGDBAPI::Row *self,std::wstring name){
    checkResult(self->SetNull(name));
  }
SWIGINTERN long long FileGDBAPI_Row_getDate(FileGDBAPI::Row *self,std::wstring const &name){
    struct tm value;
    checkResult(self->GetDate(name,value));
    return mktime(&value);
  }
SWIGINTERN void FileGDBAPI_Row_setDate(FileGDBAPI::Row *self,std::wstring const &name,long long date){
    const time_t time = (time_t)date;
    struct tm* tm_time = localtime(&time);
    if (tm_time == 0) {
      throw std::runtime_error("Invalid date " + date);
    } else {
      struct tm value;
      value = *tm_time;
      checkResult(self->SetDate(name, value));
    }
  }
SWIGINTERN double FileGDBAPI_Row_getDouble(FileGDBAPI::Row *self,std::wstring const &name){
    double value;
    checkResult(self->GetDouble(name,value));
    return value;
  }
SWIGINTERN void FileGDBAPI_Row_setDouble(FileGDBAPI::Row *self,std::wstring const &name,double value){
    checkResult(self->SetDouble(name, value));
  }
SWIGINTERN float FileGDBAPI_Row_getFloat(FileGDBAPI::Row *self,std::wstring const &name){
    float value;
    checkResult(self->GetFloat(name,value));
    return value;
  }
SWIGINTERN void FileGDBAPI_Row_setFloat(FileGDBAPI::Row *self,std::wstring const &name,double value){
    checkResult(self->SetFloat(name, value));
  }
SWIGINTERN FileGDBAPI::Guid FileGDBAPI_Row_getGuid(FileGDBAPI::Row *self,std::wstring name){
    FileGDBAPI::Guid value;
    checkResult(self->GetGUID(name,value));
    return value;
  }
SWIGINTERN FileGDBAPI::Guid FileGDBAPI_Row_getGlobalId(FileGDBAPI::Row *self){
    FileGDBAPI::Guid value;
    checkResult(self->GetGlobalID(value));
    return value;
  }
SWIGINTERN void FileGDBAPI_Row_setGuid(FileGDBAPI::Row *self,std::wstring const &name,FileGDBAPI::Guid const &value){
    checkResult(self->SetGUID(name, value));
  }
SWIGINTERN int FileGDBAPI_Row_getOid(FileGDBAPI::Row *self){
    int value;
    checkResult(self->GetOID(value));
    return value;
  }
SWIGINTERN short FileGDBAPI_Row_getShort(FileGDBAPI::Row *self,std::wstring const &name){
    short value;
    checkResult(self->GetShort(name,value));
    return value;
  }
SWIGINTERN void FileGDBAPI_Row_setShort(FileGDBAPI::Row *self,std::wstring const &name,short value){
    checkResult(self->SetShort(name, value));
  }
SWIGINTERN int32 FileGDBAPI_Row_getInteger(FileGDBAPI::Row *self,std::wstring const &name){
    int value;
    checkResult(self->GetInteger(name,value));
    return value;
  }
SWIGINTERN void FileGDBAPI_Row_setInteger(FileGDBAPI::Row *self,std::wstring const &name,int32 value){
    checkResult(self->SetInteger(name, value));
  }
SWIGINTERN std::wstring FileGDBAPI_Row_getString(FileGDBAPI::Row *self,std::wstring const &name){
    std::wstring value;
    checkResult(self->GetString(name,value));
    return value;
  }
SWIGINTERN void FileGDBAPI_Row_setString(FileGDBAPI::Row *self,std::wstring const &name,std::wstring const &value){
    checkResult(self->SetString(name, value));
  }
SWIGINTERN std::string FileGDBAPI_Row_getXML(FileGDBAPI::Row *self,std::wstring const &name){
    std::string value;
    checkResult(self->GetXML(name,value));
    return value;
  }
SWIGINTERN void FileGDBAPI_Row_setXML(FileGDBAPI::Row *self,std::wstring const &name,std::string const &value){
    checkResult(self->SetXML(name, value));
  }
SWIGINTERN FileGDBAPI::ShapeBuffer *FileGDBAPI_Row_getGeometry(FileGDBAPI::Row *self){
    FileGDBAPI::ShapeBuffer* geometry = new FileGDBAPI::ShapeBuffer();
    checkResult(self->GetGeometry(*geometry));
     return geometry;
  }
SWIGINTERN void FileGDBAPI_Row_setGeometry(FileGDBAPI::Row *self,FileGDBAPI::ShapeBuffer const &value){
    checkResult(self->SetGeometry(value));
  }
SWIGINTERN FileGDBAPI::Row *FileGDBAPI_EnumRows_next(FileGDBAPI::EnumRows *self){
    FileGDBAPI::Row* value = new FileGDBAPI::Row();
    int hr = self->Next(*value);
    if (hr == ((fgdbError)0x00000000)) {
      return value;
    } else {
      delete value;
      return NULL;
    }
  }
SWIGINTERN int FileGDBAPI_FieldInfo_getFieldCount(FileGDBAPI::FieldInfo *self){
    int count;
    checkResult(self->GetFieldCount(count));
    return count;
  }
SWIGINTERN std::wstring FileGDBAPI_FieldInfo_getFieldName(FileGDBAPI::FieldInfo *self,int i){
    std::wstring name;
    checkResult(self->GetFieldName(i, name));
    return name;
  }
SWIGINTERN int FileGDBAPI_FieldInfo_getFieldLength(FileGDBAPI::FieldInfo *self,int i){
    int length;
    checkResult(self->GetFieldLength(i, length));
    return length;
  }
SWIGINTERN bool FileGDBAPI_FieldInfo_isNullable(FileGDBAPI::FieldInfo *self,int i){
    bool nullable;
    checkResult(self->GetFieldIsNullable(i, nullable));
    return nullable;
  }
SWIGINTERN FileGDBAPI::FieldType FileGDBAPI_FieldInfo_getFieldType(FileGDBAPI::FieldInfo *self,int i){
    FileGDBAPI::FieldType type;
    checkResult(self->GetFieldType(i, type));
    return type;
  }
SWIGINTERN unsigned char FileGDBAPI_ShapeBuffer_get(FileGDBAPI::ShapeBuffer *self,int i){
    return self->shapeBuffer[i];
  }
SWIGINTERN void FileGDBAPI_ShapeBuffer_set(FileGDBAPI::ShapeBuffer *self,int i,unsigned char c){
    self->shapeBuffer[i] = c;
  }
SWIGINTERN byte *FileGDBAPI_ShapeBuffer_getShapeBuffer(FileGDBAPI::ShapeBuffer *self){
    return self->shapeBuffer;
  }
SWIGINTERN FileGDBAPI::ShapeType FileGDBAPI_ShapeBuffer_getShapeType(FileGDBAPI::ShapeBuffer *self){
    FileGDBAPI::ShapeType value;
    checkResult(self->GetShapeType(value));
    return value;
  }
SWIGINTERN FileGDBAPI::GeometryType FileGDBAPI_ShapeBuffer_getGeometryType(FileGDBAPI::ShapeBuffer *self){
    FileGDBAPI::GeometryType value;
    checkResult(self->GetGeometryType(value));
    return value;
  }
SWIGINTERN unsigned char FileGDBAPI_ByteArray_get(FileGDBAPI::ByteArray *self,int i){
    return self->byteArray[i];
  }
SWIGINTERN void FileGDBAPI_ByteArray_set(FileGDBAPI::ByteArray *self,int i,unsigned char c){
    self->byteArray[i] = c;
  }
SWIGINTERN std::wstring FileGDBAPI_Guid_toString(FileGDBAPI::Guid *self){
    std::wstring value;
    checkResult(self->ToString(value));
    return value;
  }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1VectorOfString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<std::string > *)new std::vector<std::string >();
  *(std::vector<std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1VectorOfString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<std::string >::size_type arg1 ;
  std::vector<std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<std::string >::size_type)jarg1; 
  result = (std::vector<std::string > *)new std::vector<std::string >(arg1);
  *(std::vector<std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfString_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  result = ((std::vector<std::string > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfString_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  result = ((std::vector<std::string > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfString_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  arg2 = (std::vector<std::string >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfString_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  result = (bool)((std::vector<std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfString_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfString_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  std::vector<std::string >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->push_back((std::vector<std::string >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  int arg2 ;
  std::vector<std::string >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<std::string >::const_reference _result_ref = std_vector_Sl_std_string_Sg__get(arg1,arg2);
      result = (std::vector<std::string >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = jenv->NewStringUTF(result->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  int arg2 ;
  std::vector<std::string >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  try {
    std_vector_Sl_std_string_Sg__set(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1VectorOfString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<std::string > *arg1 = (std::vector<std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::string > **)&jarg1; 
  {
    try {
      delete arg1;
      ;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1VectorOfWString_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<std::wstring > *)new std::vector<std::wstring >();
  *(std::vector<std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1VectorOfWString_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<std::wstring >::size_type arg1 ;
  std::vector<std::wstring > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<std::wstring >::size_type)jarg1; 
  result = (std::vector<std::wstring > *)new std::vector<std::wstring >(arg1);
  *(std::vector<std::wstring > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfWString_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<std::wstring > *arg1 = (std::vector<std::wstring > *) 0 ;
  std::vector<std::wstring >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::wstring > **)&jarg1; 
  result = ((std::vector<std::wstring > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfWString_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<std::wstring > *arg1 = (std::vector<std::wstring > *) 0 ;
  std::vector<std::wstring >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::wstring > **)&jarg1; 
  result = ((std::vector<std::wstring > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfWString_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<std::wstring > *arg1 = (std::vector<std::wstring > *) 0 ;
  std::vector<std::wstring >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::wstring > **)&jarg1; 
  arg2 = (std::vector<std::wstring >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfWString_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector<std::wstring > *arg1 = (std::vector<std::wstring > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::wstring > **)&jarg1; 
  result = (bool)((std::vector<std::wstring > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfWString_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector<std::wstring > *arg1 = (std::vector<std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::wstring > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfWString_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::vector<std::wstring > *arg1 = (std::vector<std::wstring > *) 0 ;
  std::vector<std::wstring >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::wstring > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  (arg1)->push_back((std::vector<std::wstring >::value_type const &)*arg2);
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfWString_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  std::vector<std::wstring > *arg1 = (std::vector<std::wstring > *) 0 ;
  int arg2 ;
  std::vector<std::wstring >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::wstring > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<std::wstring >::const_reference _result_ref = std_vector_Sl_std_wstring_Sg__get(arg1,arg2);
      result = (std::vector<std::wstring >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jsize result_len = result->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)(*result)[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_VectorOfWString_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  std::vector<std::wstring > *arg1 = (std::vector<std::wstring > *) 0 ;
  int arg2 ;
  std::vector<std::wstring >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<std::wstring > **)&jarg1; 
  arg2 = (int)jarg2; 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    wchar_t *conv_buf = new wchar_t[arg3_len];
    for (jsize i = 0; i < arg3_len; ++i) {
      conv_buf[i] = arg3_pstr[i];
    }
    arg3_str = std::wstring(conv_buf, arg3_len);
    delete [] conv_buf;
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  try {
    std_vector_Sl_std_wstring_Sg__set(arg1,arg2,(std::wstring const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1VectorOfWString(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<std::wstring > *arg1 = (std::vector<std::wstring > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<std::wstring > **)&jarg1; 
  {
    try {
      delete arg1;
      ;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1FloatArray(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArrayOut<float > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArrayOut<float > *)new ArrayOut<float >();
  *(ArrayOut<float > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jfloat JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FloatArray_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  ArrayOut<float > *arg1 = (ArrayOut<float > *) 0 ;
  int arg2 ;
  float *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayOut<float > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    float const &_result_ref = (arg1)->get(arg2);
    result = (float *) &_result_ref;
  }
  jresult = (jfloat)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FloatArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  ArrayOut<float > *arg1 = (ArrayOut<float > *) 0 ;
  int arg2 ;
  float *arg3 = 0 ;
  float temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayOut<float > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (float)jarg3; 
  arg3 = &temp3; 
  (arg1)->set(arg2,(float const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1FloatArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArrayOut<float > *arg1 = (ArrayOut<float > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArrayOut<float > **)&jarg1; 
  {
    try {
      delete arg1;
      ;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1IntArray(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArrayOut<int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArrayOut<int > *)new ArrayOut<int >();
  *(ArrayOut<int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_IntArray_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  ArrayOut<int > *arg1 = (ArrayOut<int > *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayOut<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    int const &_result_ref = (arg1)->get(arg2);
    result = (int *) &_result_ref;
  }
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_IntArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  ArrayOut<int > *arg1 = (ArrayOut<int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayOut<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  (arg1)->set(arg2,(int const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1IntArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArrayOut<int > *arg1 = (ArrayOut<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArrayOut<int > **)&jarg1; 
  {
    try {
      delete arg1;
      ;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1DoubleArray(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArrayOut<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArrayOut<double > *)new ArrayOut<double >();
  *(ArrayOut<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_DoubleArray_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  ArrayOut<double > *arg1 = (ArrayOut<double > *) 0 ;
  int arg2 ;
  double *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayOut<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    double const &_result_ref = (arg1)->get(arg2);
    result = (double *) &_result_ref;
  }
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_DoubleArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  ArrayOut<double > *arg1 = (ArrayOut<double > *) 0 ;
  int arg2 ;
  double *arg3 = 0 ;
  double temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayOut<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (double)jarg3; 
  arg3 = &temp3; 
  (arg1)->set(arg2,(double const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1DoubleArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArrayOut<double > *arg1 = (ArrayOut<double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArrayOut<double > **)&jarg1; 
  {
    try {
      delete arg1;
      ;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1UnsignedCharArray(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ArrayOut<unsigned char > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ArrayOut<unsigned char > *)new ArrayOut<unsigned char >();
  *(ArrayOut<unsigned char > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_UnsignedCharArray_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  ArrayOut<unsigned char > *arg1 = (ArrayOut<unsigned char > *) 0 ;
  int arg2 ;
  unsigned char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayOut<unsigned char > **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    unsigned char const &_result_ref = (arg1)->get(arg2);
    result = (unsigned char *) &_result_ref;
  }
  jresult = (jshort)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_UnsignedCharArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  ArrayOut<unsigned char > *arg1 = (ArrayOut<unsigned char > *) 0 ;
  int arg2 ;
  unsigned char *arg3 = 0 ;
  unsigned char temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ArrayOut<unsigned char > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (unsigned char)jarg3; 
  arg3 = &temp3; 
  (arg1)->set(arg2,(unsigned char const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1UnsignedCharArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ArrayOut<unsigned char > *arg1 = (ArrayOut<unsigned char > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ArrayOut<unsigned char > **)&jarg1; 
  {
    try {
      delete arg1;
      ;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_createGeodatabase(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  FileGDBAPI::Geodatabase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    wchar_t *conv_buf = new wchar_t[arg1_len];
    for (jsize i = 0; i < arg1_len; ++i) {
      conv_buf[i] = arg1_pstr[i];
    }
    arg1_str = std::wstring(conv_buf, arg1_len);
    delete [] conv_buf;
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  {
    try {
      result = (FileGDBAPI::Geodatabase *)createGeodatabase((std::wstring const &)*arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::Geodatabase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_openGeodatabase(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::wstring *arg1 = 0 ;
  FileGDBAPI::Geodatabase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    wchar_t *conv_buf = new wchar_t[arg1_len];
    for (jsize i = 0; i < arg1_len; ++i) {
      conv_buf[i] = arg1_pstr[i];
    }
    arg1_str = std::wstring(conv_buf, arg1_len);
    delete [] conv_buf;
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  {
    try {
      result = (FileGDBAPI::Geodatabase *)openGeodatabase((std::wstring const &)*arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::Geodatabase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_getSpatialReferenceWkt(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jstring jresult = 0 ;
  int arg1 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  {
    try {
      result = getSpatialReferenceWkt(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_CloseGeodatabase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Geodatabase & reference is null");
    return 0;
  } 
  {
    try {
      result = (fgdbError)FileGDBAPI::CloseGeodatabase(*arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_DeleteGeodatabase(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::wstring *arg1 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    wchar_t *conv_buf = new wchar_t[arg1_len];
    for (jsize i = 0; i < arg1_len; ++i) {
      conv_buf[i] = arg1_pstr[i];
    }
    arg1_str = std::wstring(conv_buf, arg1_len);
    delete [] conv_buf;
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  {
    try {
      result = (fgdbError)FileGDBAPI::DeleteGeodatabase((std::wstring const &)*arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1GetDatasetTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::vector<std::wstring > *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  arg2 = *(std::vector<std::wstring > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::wstring > & reference is null");
    return 0;
  } 
  {
    try {
      result = (fgdbError)(arg1)->GetDatasetTypes(*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1GetDatasetRelationshipTypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::vector<std::wstring > *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  arg2 = *(std::vector<std::wstring > **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::wstring > & reference is null");
    return 0;
  } 
  {
    try {
      result = (fgdbError)(arg1)->GetDatasetRelationshipTypes(*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1GetRelatedDatasets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  std::vector<std::wstring > *arg5 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    wchar_t *conv_buf = new wchar_t[arg3_len];
    for (jsize i = 0; i < arg3_len; ++i) {
      conv_buf[i] = arg3_pstr[i];
    }
    arg3_str = std::wstring(conv_buf, arg3_len);
    delete [] conv_buf;
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    wchar_t *conv_buf = new wchar_t[arg4_len];
    for (jsize i = 0; i < arg4_len; ++i) {
      conv_buf[i] = arg4_pstr[i];
    }
    arg4_str = std::wstring(conv_buf, arg4_len);
    delete [] conv_buf;
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  arg5 = *(std::vector<std::wstring > **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::wstring > & reference is null");
    return 0;
  } 
  {
    try {
      result = (fgdbError)(arg1)->GetRelatedDatasets((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4,*arg5);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1GetChildDatasetDefinitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::vector<std::string > *arg4 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    wchar_t *conv_buf = new wchar_t[arg3_len];
    for (jsize i = 0; i < arg3_len; ++i) {
      conv_buf[i] = arg3_pstr[i];
    }
    arg3_str = std::wstring(conv_buf, arg3_len);
    delete [] conv_buf;
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = *(std::vector<std::string > **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
    return 0;
  } 
  {
    try {
      result = (fgdbError)(arg1)->GetChildDatasetDefinitions((std::wstring const &)*arg2,(std::wstring const &)*arg3,*arg4);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1GetRelatedDatasetDefinitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jlong jarg5, jobject jarg5_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  std::vector<std::string > *arg5 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg5_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    wchar_t *conv_buf = new wchar_t[arg3_len];
    for (jsize i = 0; i < arg3_len; ++i) {
      conv_buf[i] = arg3_pstr[i];
    }
    arg3_str = std::wstring(conv_buf, arg3_len);
    delete [] conv_buf;
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    wchar_t *conv_buf = new wchar_t[arg4_len];
    for (jsize i = 0; i < arg4_len; ++i) {
      conv_buf[i] = arg4_pstr[i];
    }
    arg4_str = std::wstring(conv_buf, arg4_len);
    delete [] conv_buf;
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  arg5 = *(std::vector<std::string > **)&jarg5;
  if(!arg5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<std::string > & reference is null");
    return 0;
  } 
  {
    try {
      result = (fgdbError)(arg1)->GetRelatedDatasetDefinitions((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4,*arg5);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1CloseTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  FileGDBAPI::Table *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  arg2 = *(FileGDBAPI::Table **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Table & reference is null");
    return 0;
  } 
  {
    try {
      result = (fgdbError)(arg1)->CloseTable(*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1Rename(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  std::wstring *arg4 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    wchar_t *conv_buf = new wchar_t[arg3_len];
    for (jsize i = 0; i < arg3_len; ++i) {
      conv_buf[i] = arg3_pstr[i];
    }
    arg3_str = std::wstring(conv_buf, arg3_len);
    delete [] conv_buf;
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg4_pstr = jenv->GetStringChars(jarg4, 0);
  if (!arg4_pstr) return 0;
  jsize arg4_len = jenv->GetStringLength(jarg4);
  std::wstring arg4_str;
  if (arg4_len) {
    wchar_t *conv_buf = new wchar_t[arg4_len];
    for (jsize i = 0; i < arg4_len; ++i) {
      conv_buf[i] = arg4_pstr[i];
    }
    arg4_str = std::wstring(conv_buf, arg4_len);
    delete [] conv_buf;
  }
  arg4 = &arg4_str;
  jenv->ReleaseStringChars(jarg4, arg4_pstr);
  
  {
    try {
      result = (fgdbError)(arg1)->Rename((std::wstring const &)*arg2,(std::wstring const &)*arg3,(std::wstring const &)*arg4);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1Move(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    wchar_t *conv_buf = new wchar_t[arg3_len];
    for (jsize i = 0; i < arg3_len; ++i) {
      conv_buf[i] = arg3_pstr[i];
    }
    arg3_str = std::wstring(conv_buf, arg3_len);
    delete [] conv_buf;
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    try {
      result = (fgdbError)(arg1)->Move((std::wstring const &)*arg2,(std::wstring const &)*arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1Delete(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    wchar_t *conv_buf = new wchar_t[arg3_len];
    for (jsize i = 0; i < arg3_len; ++i) {
      conv_buf[i] = arg3_pstr[i];
    }
    arg3_str = std::wstring(conv_buf, arg3_len);
    delete [] conv_buf;
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    try {
      result = (fgdbError)(arg1)->Delete((std::wstring const &)*arg2,(std::wstring const &)*arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1ExecuteSQL(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3, jlong jarg4, jobject jarg4_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  bool arg3 ;
  FileGDBAPI::EnumRows *arg4 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = jarg3 ? true : false; 
  arg4 = *(FileGDBAPI::EnumRows **)&jarg4;
  if(!arg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::EnumRows & reference is null");
    return 0;
  } 
  {
    try {
      result = (fgdbError)(arg1)->ExecuteSQL((std::wstring const &)*arg2,arg3,*arg4);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1Geodatabase(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Geodatabase *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (FileGDBAPI::Geodatabase *)new FileGDBAPI::Geodatabase();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::Geodatabase **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1Geodatabase(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  {
    try {
      delete arg1;
      ;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_createGeodatabase2(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::wstring *arg1 = 0 ;
  FileGDBAPI::Geodatabase *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    wchar_t *conv_buf = new wchar_t[arg1_len];
    for (jsize i = 0; i < arg1_len; ++i) {
      conv_buf[i] = arg1_pstr[i];
    }
    arg1_str = std::wstring(conv_buf, arg1_len);
    delete [] conv_buf;
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = *(FileGDBAPI::Geodatabase **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Geodatabase & reference is null");
    return 0;
  } 
  {
    try {
      result = (fgdbError)FileGDBAPI::CreateGeodatabase((std::wstring const &)*arg1,*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_openGeodatabase2(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  std::wstring *arg1 = 0 ;
  FileGDBAPI::Geodatabase *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    wchar_t *conv_buf = new wchar_t[arg1_len];
    for (jsize i = 0; i < arg1_len; ++i) {
      conv_buf[i] = arg1_pstr[i];
    }
    arg1_str = std::wstring(conv_buf, arg1_len);
    delete [] conv_buf;
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  arg2 = *(FileGDBAPI::Geodatabase **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Geodatabase & reference is null");
    return 0;
  } 
  {
    try {
      result = (fgdbError)FileGDBAPI::OpenGeodatabase((std::wstring const &)*arg1,*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_closeGeodatabase2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Geodatabase & reference is null");
    return 0;
  } 
  {
    try {
      result = (fgdbError)FileGDBAPI::CloseGeodatabase(*arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_deleteGeodatabase2(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  std::wstring *arg1 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg1_pstr = jenv->GetStringChars(jarg1, 0);
  if (!arg1_pstr) return 0;
  jsize arg1_len = jenv->GetStringLength(jarg1);
  std::wstring arg1_str;
  if (arg1_len) {
    wchar_t *conv_buf = new wchar_t[arg1_len];
    for (jsize i = 0; i < arg1_len; ++i) {
      conv_buf[i] = arg1_pstr[i];
    }
    arg1_str = std::wstring(conv_buf, arg1_len);
    delete [] conv_buf;
  }
  arg1 = &arg1_str;
  jenv->ReleaseStringChars(jarg1, arg1_pstr);
  
  {
    try {
      result = (fgdbError)FileGDBAPI::DeleteGeodatabase((std::wstring const &)*arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1createFeatureDataset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  arg2 =  std::string(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      FileGDBAPI_Geodatabase_createFeatureDataset(arg1,arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1getChildDatasets(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring arg2 ;
  std::wstring arg3 ;
  std::vector<std::wstring > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2 = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    wchar_t *conv_buf = new wchar_t[arg3_len];
    for (jsize i = 0; i < arg3_len; ++i) {
      conv_buf[i] = arg3_pstr[i];
    }
    arg3 = std::wstring(conv_buf, arg3_len);
    delete [] conv_buf;
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    try {
      result = FileGDBAPI_Geodatabase_getChildDatasets(arg1,arg2,arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(std::vector<std::wstring > **)&jresult = new std::vector<std::wstring >((std::vector<std::wstring > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1getDatasetDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring arg2 ;
  std::wstring arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2 = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    wchar_t *conv_buf = new wchar_t[arg3_len];
    for (jsize i = 0; i < arg3_len; ++i) {
      conv_buf[i] = arg3_pstr[i];
    }
    arg3 = std::wstring(conv_buf, arg3_len);
    delete [] conv_buf;
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    try {
      result = FileGDBAPI_Geodatabase_getDatasetDefinition(arg1,arg2,arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1getDatasetDocumentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jstring jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring arg2 ;
  std::wstring arg3 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2 = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  if (arg3_len) {
    wchar_t *conv_buf = new wchar_t[arg3_len];
    for (jsize i = 0; i < arg3_len; ++i) {
      conv_buf[i] = arg3_pstr[i];
    }
    arg3 = std::wstring(conv_buf, arg3_len);
    delete [] conv_buf;
  }
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    try {
      result = FileGDBAPI_Geodatabase_getDatasetDocumentation(arg1,arg2,arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1getDomains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::vector<std::wstring > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  {
    try {
      result = FileGDBAPI_Geodatabase_getDomains(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(std::vector<std::wstring > **)&jresult = new std::vector<std::wstring >((std::vector<std::wstring > &)result); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1getDomainDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring arg2 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2 = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = FileGDBAPI_Geodatabase_getDomainDefinition(arg1,arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1createDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      FileGDBAPI_Geodatabase_createDomain(arg1,(std::string const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1alterDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      FileGDBAPI_Geodatabase_alterDomain(arg1,(std::string const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1deleteDomain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      FileGDBAPI_Geodatabase_deleteDomain(arg1,(std::wstring const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1getQueryName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring arg2 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2 = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = FileGDBAPI_Geodatabase_getQueryName(arg1,arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1openTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::Table *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (FileGDBAPI::Table *)FileGDBAPI_Geodatabase_openTable(arg1,(std::wstring const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::Table **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Geodatabase_1createTable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  FileGDBAPI::Geodatabase *arg1 = (FileGDBAPI::Geodatabase *) 0 ;
  std::string *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  FileGDBAPI::Table *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Geodatabase **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    wchar_t *conv_buf = new wchar_t[arg3_len];
    for (jsize i = 0; i < arg3_len; ++i) {
      conv_buf[i] = arg3_pstr[i];
    }
    arg3_str = std::wstring(conv_buf, arg3_len);
    delete [] conv_buf;
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    try {
      result = (FileGDBAPI::Table *)FileGDBAPI_Geodatabase_createTable(arg1,(std::string const &)*arg2,(std::wstring const &)*arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::Table **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1SetDocumentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (fgdbError)(arg1)->SetDocumentation((std::string const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1GetFieldInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::FieldInfo *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::FieldInfo **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::FieldInfo & reference is null");
    return 0;
  } 
  {
    try {
      result = (fgdbError)(arg1)->GetFieldInformation(*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1AddField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (fgdbError)(arg1)->AddField((std::string const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1AlterField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (fgdbError)(arg1)->AlterField((std::string const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1DeleteField(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (fgdbError)(arg1)->DeleteField((std::wstring const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1AddIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (fgdbError)(arg1)->AddIndex((std::string const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1DeleteIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (fgdbError)(arg1)->DeleteIndex((std::wstring const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1CreateSubtype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (fgdbError)(arg1)->CreateSubtype((std::string const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1AlterSubtype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  {
    try {
      result = (fgdbError)(arg1)->AlterSubtype((std::string const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1DeleteSubtype(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (fgdbError)(arg1)->DeleteSubtype((std::wstring const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1EnableSubtypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  std::string *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return 0;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return 0;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      result = (fgdbError)(arg1)->EnableSubtypes((std::wstring const &)*arg2,(std::string const &)*arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1SetDefaultSubtypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  int arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (fgdbError)(arg1)->SetDefaultSubtypeCode(arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1DisableSubtypes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    try {
      result = (fgdbError)(arg1)->DisableSubtypes();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1GetExtent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::Envelope *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::Envelope **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Envelope & reference is null");
    return 0;
  } 
  {
    try {
      result = (fgdbError)(arg1)->GetExtent(*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1SetWriteLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    try {
      result = (fgdbError)(arg1)->SetWriteLock();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1FreeWriteLock(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    try {
      result = (fgdbError)(arg1)->FreeWriteLock();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1LoadOnlyMode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  bool arg2 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  {
    try {
      result = (fgdbError)(arg1)->LoadOnlyMode(arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1Table(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Table *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (FileGDBAPI::Table *)new FileGDBAPI::Table();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::Table **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1Table(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    try {
      delete arg1;
      ;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1isEditable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    try {
      result = (bool)FileGDBAPI_Table_isEditable(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1getDefinition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    try {
      result = FileGDBAPI_Table_getDefinition(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1getDocumentation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    try {
      result = FileGDBAPI_Table_getDocumentation(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1getRowCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    try {
      result = (int)FileGDBAPI_Table_getRowCount(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1getDefaultSubtypeCode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    try {
      result = (int)FileGDBAPI_Table_getDefaultSubtypeCode(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1getIndexes(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::vector<std::string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    try {
      result = FileGDBAPI_Table_getIndexes(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(std::vector<std::string > **)&jresult = new std::vector<std::string >((std::vector<std::string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1createRowObject(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::Row *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  {
    try {
      result = (FileGDBAPI::Row *)FileGDBAPI_Table_createRowObject(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::Row **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1insertRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::Row *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::Row **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Row & reference is null");
    return ;
  } 
  {
    try {
      FileGDBAPI_Table_insertRow(arg1,*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1updateRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::Row *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::Row **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Row & reference is null");
    return ;
  } 
  {
    try {
      FileGDBAPI_Table_updateRow(arg1,*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1deleteRow(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  FileGDBAPI::Row *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  arg2 = *(FileGDBAPI::Row **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Row & reference is null");
    return ;
  } 
  {
    try {
      FileGDBAPI_Table_deleteRow(arg1,*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1search_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jlong jarg4, jobject jarg4_, jboolean jarg5) {
  jlong jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  FileGDBAPI::Envelope arg4 ;
  bool arg5 ;
  FileGDBAPI::EnumRows *result = 0 ;
  FileGDBAPI::Envelope *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg4_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    wchar_t *conv_buf = new wchar_t[arg3_len];
    for (jsize i = 0; i < arg3_len; ++i) {
      conv_buf[i] = arg3_pstr[i];
    }
    arg3_str = std::wstring(conv_buf, arg3_len);
    delete [] conv_buf;
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  argp4 = *(FileGDBAPI::Envelope **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null FileGDBAPI::Envelope");
    return 0;
  }
  arg4 = *argp4; 
  arg5 = jarg5 ? true : false; 
  {
    try {
      result = (FileGDBAPI::EnumRows *)FileGDBAPI_Table_search__SWIG_0(arg1,(std::wstring const &)*arg2,(std::wstring const &)*arg3,arg4,arg5);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::EnumRows **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Table_1search_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  FileGDBAPI::Table *arg1 = (FileGDBAPI::Table *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  bool arg4 ;
  FileGDBAPI::EnumRows *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Table **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return 0;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    wchar_t *conv_buf = new wchar_t[arg3_len];
    for (jsize i = 0; i < arg3_len; ++i) {
      conv_buf[i] = arg3_pstr[i];
    }
    arg3_str = std::wstring(conv_buf, arg3_len);
    delete [] conv_buf;
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  arg4 = jarg4 ? true : false; 
  {
    try {
      result = (FileGDBAPI::EnumRows *)FileGDBAPI_Table_search__SWIG_1(arg1,(std::wstring const &)*arg2,(std::wstring const &)*arg3,arg4);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::EnumRows **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1GetBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::ByteArray *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::ByteArray **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::ByteArray & reference is null");
    return 0;
  } 
  {
    try {
      result = (fgdbError)(arg1)->GetBinary((std::wstring const &)*arg2,*arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1SetBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::ByteArray *arg3 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::ByteArray **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::ByteArray const & reference is null");
    return 0;
  } 
  {
    try {
      result = (fgdbError)(arg1)->SetBinary((std::wstring const &)*arg2,(FileGDBAPI::ByteArray const &)*arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1GetFieldInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  FileGDBAPI::FieldInfo *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = *(FileGDBAPI::FieldInfo **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::FieldInfo & reference is null");
    return 0;
  } 
  {
    try {
      result = (fgdbError)(arg1)->GetFieldInformation(*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1Row(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Row *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (FileGDBAPI::Row *)new FileGDBAPI::Row();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::Row **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1Row(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  {
    try {
      delete arg1;
      ;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1isNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2 = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (bool)FileGDBAPI_Row_isNull(arg1,arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1setNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2 = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      FileGDBAPI_Row_setNull(arg1,arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1getDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  long long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (long long)FileGDBAPI_Row_getDate(arg1,(std::wstring const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1setDate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3) {
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  long long arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (long long)jarg3; 
  {
    try {
      FileGDBAPI_Row_setDate(arg1,(std::wstring const &)*arg2,arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1getDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jdouble jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (double)FileGDBAPI_Row_getDouble(arg1,(std::wstring const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1setDouble(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (double)jarg3; 
  {
    try {
      FileGDBAPI_Row_setDouble(arg1,(std::wstring const &)*arg2,arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jfloat JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1getFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jfloat jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  float result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (float)FileGDBAPI_Row_getFloat(arg1,(std::wstring const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jfloat)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1setFloat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jdouble jarg3) {
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (double)jarg3; 
  {
    try {
      FileGDBAPI_Row_setFloat(arg1,(std::wstring const &)*arg2,arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1getGuid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring arg2 ;
  FileGDBAPI::Guid result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2 = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = FileGDBAPI_Row_getGuid(arg1,arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::Guid **)&jresult = new FileGDBAPI::Guid((FileGDBAPI::Guid &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1getGlobalId(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  FileGDBAPI::Guid result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  {
    try {
      result = FileGDBAPI_Row_getGlobalId(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::Guid **)&jresult = new FileGDBAPI::Guid((FileGDBAPI::Guid &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1setGuid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jobject jarg3_) {
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  FileGDBAPI::Guid *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = *(FileGDBAPI::Guid **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Guid const & reference is null");
    return ;
  } 
  {
    try {
      FileGDBAPI_Row_setGuid(arg1,(std::wstring const &)*arg2,(FileGDBAPI::Guid const &)*arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1getOid(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  {
    try {
      result = (int)FileGDBAPI_Row_getOid(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1getShort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jshort jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  short result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (short)FileGDBAPI_Row_getShort(arg1,(std::wstring const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1setShort(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jshort jarg3) {
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  short arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (short)jarg3; 
  {
    try {
      FileGDBAPI_Row_setShort(arg1,(std::wstring const &)*arg2,arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1getInteger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  int32 result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (int32)FileGDBAPI_Row_getInteger(arg1,(std::wstring const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1setInteger(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  int32 arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  arg3 = (int32)jarg3; 
  {
    try {
      FileGDBAPI_Row_setInteger(arg1,(std::wstring const &)*arg2,arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = FileGDBAPI_Row_getString(arg1,(std::wstring const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1setString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  std::wstring *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg3_pstr = jenv->GetStringChars(jarg3, 0);
  if (!arg3_pstr) return ;
  jsize arg3_len = jenv->GetStringLength(jarg3);
  std::wstring arg3_str;
  if (arg3_len) {
    wchar_t *conv_buf = new wchar_t[arg3_len];
    for (jsize i = 0; i < arg3_len; ++i) {
      conv_buf[i] = arg3_pstr[i];
    }
    arg3_str = std::wstring(conv_buf, arg3_len);
    delete [] conv_buf;
  }
  arg3 = &arg3_str;
  jenv->ReleaseStringChars(jarg3, arg3_pstr);
  
  {
    try {
      FileGDBAPI_Row_setString(arg1,(std::wstring const &)*arg2,(std::wstring const &)*arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1getXML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = FileGDBAPI_Row_getXML(arg1,(std::wstring const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1setXML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  std::wstring *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return ;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return ;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  {
    try {
      FileGDBAPI_Row_setXML(arg1,(std::wstring const &)*arg2,(std::string const &)*arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1getGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  FileGDBAPI::ShapeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  {
    try {
      result = (FileGDBAPI::ShapeBuffer *)FileGDBAPI_Row_getGeometry(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::ShapeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Row_1setGeometry(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  FileGDBAPI::Row *arg1 = (FileGDBAPI::Row *) 0 ;
  FileGDBAPI::ShapeBuffer *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Row **)&jarg1; 
  arg2 = *(FileGDBAPI::ShapeBuffer **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::ShapeBuffer const & reference is null");
    return ;
  } 
  {
    try {
      FileGDBAPI_Row_setGeometry(arg1,(FileGDBAPI::ShapeBuffer const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_EnumRows_1Close(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FileGDBAPI::EnumRows *arg1 = (FileGDBAPI::EnumRows *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EnumRows **)&jarg1; 
  {
    try {
      (arg1)->Close();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_EnumRows_1GetFieldInformation(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  FileGDBAPI::EnumRows *arg1 = (FileGDBAPI::EnumRows *) 0 ;
  FileGDBAPI::FieldInfo *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::EnumRows **)&jarg1; 
  arg2 = *(FileGDBAPI::FieldInfo **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::FieldInfo & reference is null");
    return 0;
  } 
  {
    try {
      result = (fgdbError)(arg1)->GetFieldInformation(*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1EnumRows(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::EnumRows *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (FileGDBAPI::EnumRows *)new FileGDBAPI::EnumRows();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::EnumRows **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1EnumRows(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::EnumRows *arg1 = (FileGDBAPI::EnumRows *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::EnumRows **)&jarg1; 
  {
    try {
      delete arg1;
      ;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_EnumRows_1next(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::EnumRows *arg1 = (FileGDBAPI::EnumRows *) 0 ;
  FileGDBAPI::Row *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::EnumRows **)&jarg1; 
  {
    try {
      result = (FileGDBAPI::Row *)FileGDBAPI_EnumRows_next(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::Row **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1FieldInfo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::FieldInfo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (FileGDBAPI::FieldInfo *)new FileGDBAPI::FieldInfo();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::FieldInfo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1FieldInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  {
    try {
      delete arg1;
      ;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FieldInfo_1getFieldCount(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  {
    try {
      result = (int)FileGDBAPI_FieldInfo_getFieldCount(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FieldInfo_1getFieldName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  int arg2 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = FileGDBAPI_FieldInfo_getFieldName(arg1,arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FieldInfo_1getFieldLength(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (int)FileGDBAPI_FieldInfo_getFieldLength(arg1,arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FieldInfo_1isNullable(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (bool)FileGDBAPI_FieldInfo_isNullable(arg1,arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_FieldInfo_1getFieldType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::FieldInfo *arg1 = (FileGDBAPI::FieldInfo *) 0 ;
  int arg2 ;
  FileGDBAPI::FieldType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::FieldInfo **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (FileGDBAPI::FieldType)FileGDBAPI_FieldInfo_getFieldType(arg1,arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1Allocate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (bool)(arg1)->Allocate(arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1ShapeBuffer_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  FileGDBAPI::ShapeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (FileGDBAPI::ShapeBuffer *)new FileGDBAPI::ShapeBuffer(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::ShapeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1ShapeBuffer_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::ShapeBuffer *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (FileGDBAPI::ShapeBuffer *)new FileGDBAPI::ShapeBuffer();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::ShapeBuffer **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1ShapeBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  {
    try {
      delete arg1;
      ;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1allocatedLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->allocatedLength = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1allocatedLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  result =  ((arg1)->allocatedLength);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1inUseLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->inUseLength = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1inUseLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  result =  ((arg1)->inUseLength);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1IsEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  {
    try {
      result = (bool)((FileGDBAPI::ShapeBuffer const *)arg1)->IsEmpty();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1SetEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  {
    try {
      (arg1)->SetEmpty();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1HasZs(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  {
    try {
      result = (bool)FileGDBAPI::ShapeBuffer::HasZs(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1HasMs(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  {
    try {
      result = (bool)FileGDBAPI::ShapeBuffer::HasMs(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1HasIDs(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  {
    try {
      result = (bool)FileGDBAPI::ShapeBuffer::HasIDs(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1HasCurves(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  {
    try {
      result = (bool)FileGDBAPI::ShapeBuffer::HasCurves(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1HasNormals(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  {
    try {
      result = (bool)FileGDBAPI::ShapeBuffer::HasNormals(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1HasTextures(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  {
    try {
      result = (bool)FileGDBAPI::ShapeBuffer::HasTextures(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1HasMaterials(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  FileGDBAPI::ShapeType arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (FileGDBAPI::ShapeType)jarg1; 
  {
    try {
      result = (bool)FileGDBAPI::ShapeBuffer::HasMaterials(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  int arg2 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (unsigned char)FileGDBAPI_ShapeBuffer_get(arg1,arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  {
    try {
      FileGDBAPI_ShapeBuffer_set(arg1,arg2,arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1getShapeBuffer(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  byte *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  {
    try {
      result = (byte *)FileGDBAPI_ShapeBuffer_getShapeBuffer(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  {
    ArrayOut<unsigned char>* arrayOut = new ArrayOut<unsigned char>();
    arrayOut->arrayOut = result;
    *(ArrayOut<unsigned char> **)&jresult = arrayOut;
  }
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1getShapeType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  FileGDBAPI::ShapeType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  {
    try {
      result = (FileGDBAPI::ShapeType)FileGDBAPI_ShapeBuffer_getShapeType(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ShapeBuffer_1getGeometryType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  FileGDBAPI::ShapeBuffer *arg1 = (FileGDBAPI::ShapeBuffer *) 0 ;
  FileGDBAPI::GeometryType result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ShapeBuffer **)&jarg1; 
  {
    try {
      result = (FileGDBAPI::GeometryType)FileGDBAPI_ShapeBuffer_getGeometryType(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ByteArray_1Allocate(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jboolean jresult = 0 ;
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  size_t arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  arg2 = (size_t)jarg2; 
  {
    try {
      result = (bool)(arg1)->Allocate(arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1ByteArray_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  size_t arg1 ;
  FileGDBAPI::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (size_t)jarg1; 
  {
    try {
      result = (FileGDBAPI::ByteArray *)new FileGDBAPI::ByteArray(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1ByteArray_1_1SWIG_11(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::ByteArray *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (FileGDBAPI::ByteArray *)new FileGDBAPI::ByteArray();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::ByteArray **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1ByteArray(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  {
    try {
      delete arg1;
      ;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ByteArray_1allocatedLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->allocatedLength = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ByteArray_1allocatedLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  result =  ((arg1)->allocatedLength);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ByteArray_1inUseLength_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  size_t arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  arg2 = (size_t)jarg2; 
  if (arg1) (arg1)->inUseLength = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ByteArray_1inUseLength_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  result =  ((arg1)->inUseLength);
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jshort JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ByteArray_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jshort jresult = 0 ;
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  int arg2 ;
  unsigned char result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  arg2 = (int)jarg2; 
  {
    try {
      result = (unsigned char)FileGDBAPI_ByteArray_get(arg1,arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jshort)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_ByteArray_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jshort jarg3) {
  FileGDBAPI::ByteArray *arg1 = (FileGDBAPI::ByteArray *) 0 ;
  int arg2 ;
  unsigned char arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::ByteArray **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (unsigned char)jarg3; 
  {
    try {
      FileGDBAPI_ByteArray_set(arg1,arg2,arg3);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1IsEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  {
    try {
      result = (bool)(arg1)->IsEmpty();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1SetEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  {
    try {
      (arg1)->SetEmpty();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1Envelope_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Envelope *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (FileGDBAPI::Envelope *)new FileGDBAPI::Envelope();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::Envelope **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1Envelope_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jdouble jarg1, jdouble jarg2, jdouble jarg3, jdouble jarg4) {
  jlong jresult = 0 ;
  double arg1 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  FileGDBAPI::Envelope *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (double)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  {
    try {
      result = (FileGDBAPI::Envelope *)new FileGDBAPI::Envelope(arg1,arg2,arg3,arg4);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::Envelope **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1Envelope(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  {
    try {
      delete arg1;
      ;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1xMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->xMin = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1xMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->xMin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1yMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->yMin = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1yMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->yMin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1xMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->xMax = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1xMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->xMax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1yMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->yMax = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1yMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->yMax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1zMin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->zMin = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1zMin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->zMin);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1zMax_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->zMax = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Envelope_1zMax_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  FileGDBAPI::Envelope *arg1 = (FileGDBAPI::Envelope *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Envelope **)&jarg1; 
  result = (double) ((arg1)->zMax);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1Guid(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Guid *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (FileGDBAPI::Guid *)new FileGDBAPI::Guid();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::Guid **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1Guid(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  {
    try {
      delete arg1;
      ;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1SetNull(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  {
    try {
      (arg1)->SetNull();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1Create(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  {
    try {
      (arg1)->Create();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


SWIGEXPORT jint JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1FromString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  std::wstring *arg2 = 0 ;
  fgdbError result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::wstring");
    return 0;
  }
  const jchar *arg2_pstr = jenv->GetStringChars(jarg2, 0);
  if (!arg2_pstr) return 0;
  jsize arg2_len = jenv->GetStringLength(jarg2);
  std::wstring arg2_str;
  if (arg2_len) {
    wchar_t *conv_buf = new wchar_t[arg2_len];
    for (jsize i = 0; i < arg2_len; ++i) {
      conv_buf[i] = arg2_pstr[i];
    }
    arg2_str = std::wstring(conv_buf, arg2_len);
    delete [] conv_buf;
  }
  arg2 = &arg2_str;
  jenv->ReleaseStringChars(jarg2, arg2_pstr);
  
  {
    try {
      result = (fgdbError)(arg1)->FromString((std::wstring const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1equal(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  FileGDBAPI::Guid *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  arg2 = *(FileGDBAPI::Guid **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Guid const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->operator ==((FileGDBAPI::Guid const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1notEqual(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  FileGDBAPI::Guid *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  arg2 = *(FileGDBAPI::Guid **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "FileGDBAPI::Guid const & reference is null");
    return 0;
  } 
  {
    try {
      result = (bool)(arg1)->operator !=((FileGDBAPI::Guid const &)*arg2);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_Guid_1toString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  FileGDBAPI::Guid *arg1 = (FileGDBAPI::Guid *) 0 ;
  std::wstring result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(FileGDBAPI::Guid **)&jarg1; 
  {
    try {
      result = FileGDBAPI_Guid_toString(arg1);;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  jsize result_len = (&result)->length();
  jchar *conv_buf = new jchar[result_len];
  for (jsize i = 0; i < result_len; ++i) {
    conv_buf[i] = (jchar)result[i];
  }
  jresult = jenv->NewString(conv_buf, result_len);
  delete [] conv_buf; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_new_1Raster(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FileGDBAPI::Raster *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  {
    try {
      result = (FileGDBAPI::Raster *)new FileGDBAPI::Raster();;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
  *(FileGDBAPI::Raster **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_revolsys_gis_esri_gdb_file_swig_EsriFileGdbJNI_delete_1Raster(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  FileGDBAPI::Raster *arg1 = (FileGDBAPI::Raster *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(FileGDBAPI::Raster **)&jarg1; 
  {
    try {
      delete arg1;
      ;
    } catch (const std::runtime_error& e) {
      handleRuntimeError(jenv, e);
    }
  }
}


#ifdef __cplusplus
}
#endif

