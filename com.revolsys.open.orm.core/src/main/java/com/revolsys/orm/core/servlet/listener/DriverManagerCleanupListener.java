package com.revolsys.orm.core.servlet.listener;import java.beans.Introspector;import java.io.IOException;import java.lang.management.ManagementFactory;import java.net.MalformedURLException;import java.net.URL;import java.sql.Driver;import java.sql.DriverManager;import java.util.Enumeration;import javax.management.InstanceNotFoundException;import javax.management.ObjectName;import javax.servlet.ServletContextEvent;import javax.servlet.ServletContextListener;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class DriverManagerCleanupListener implements ServletContextListener {  private static final Logger LOG = LoggerFactory.getLogger(DriverManagerCleanupListener.class);  public void contextInitialized(ServletContextEvent event) {    try {      new URL("file:///").openConnection().setDefaultUseCaches(false);    } catch (MalformedURLException e) {      // TODO Auto-generated catch block      e.printStackTrace();    } catch (IOException e) {      // TODO Auto-generated catch block      e.printStackTrace();    }  }  public void contextDestroyed(ServletContextEvent event) {    ClassLoader classLoader = getClass().getClassLoader();    try {      Enumeration<Driver> drivers = DriverManager.getDrivers();      while (drivers.hasMoreElements()) {        try {          Driver driver = drivers.nextElement();          Class<? extends Driver> driverClass = driver.getClass();          if (driverClass.getClassLoader() == classLoader) {            DriverManager.deregisterDriver(driver);          }          try {            // Cleanup Oracle MBean            ObjectName objectname = new ObjectName(              "com.oracle.jdbc:type=diagnosability,name="                + classLoader.getClass().getName() + "@"                + Integer.toHexString(classLoader.hashCode()));            ManagementFactory.getPlatformMBeanServer().unregisterMBean(              objectname);          } catch (InstanceNotFoundException e) {          }        } catch (Throwable e) {          LOG.error("Failled to cleanup ClassLoader for webapp", e);        }      }    } catch (Throwable e) {      LOG.error("Failled to cleanup ClassLoader for webapp", e);    } finally {      Introspector.flushCaches();    }  }}